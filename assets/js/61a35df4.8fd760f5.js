"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[1601],{37841:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var a=t(74848),s=t(28453),i=t(11470),l=t(19365),o=t(83167);const r={sidebar_label:"Generating an Instance",pagination_next:null,pagination_prev:null},c="Generating an Instance",d={id:"main/generating-instance",title:"Generating an Instance",description:"Generating an instance of a template involves creating a new entity based on the",source:"@site/docs/main/generating-instance.mdx",sourceDirName:"main",slug:"/main/generating-instance",permalink:"/templates/docs/main/generating-instance",draft:!1,unlisted:!1,editUrl:"https://github.com/marcellino-ornelas/templates/tree/master/docs/docs/main/generating-instance.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Generating an Instance",pagination_next:null,pagination_prev:null},sidebar:"docs"},h={},p=[{value:"What is a Build Path",id:"what-is-a-build-path",level:2},{value:"Short build path",id:"short-build-path",level:3},{value:"Long build path",id:"long-build-path",level:3},{value:"Multiple build paths",id:"multiple-build-paths",level:3},{value:"No Build path",id:"no-build-path",level:3},{value:"How to generate a new instance",id:"how-to-generate-a-new-instance",level:2},{value:"Using a Template&#39;s Options",id:"using-a-templates-options",level:2},{value:"Interactive",id:"interactive",level:3},{value:"CLI",id:"cli",level:3},{value:"Boolean",id:"boolean",level:6},{value:"Single values",id:"single-values",level:6},{value:"List",id:"list",level:6},{value:"Configuration file",id:"configuration-file",level:3},{value:"Aliases",id:"aliases",level:3},{value:"Hidden Options",id:"hidden-options",level:3},{value:"Core Options",id:"core-options",level:2},{value:"Default",id:"default",level:3},{value:"Wipe",id:"wipe",level:3},{value:"Force",id:"force",level:3},{value:"Extending Directory",id:"extending-directory",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h6:"h6",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"generating-an-instance",children:"Generating an Instance"})}),"\n",(0,a.jsx)(n.p,{children:"Generating an instance of a template involves creating a new entity based on the\ntemplate's contents. During this process, Templates takes the files and folders\ndefined in the template and renders them to your build path(s)."}),"\n",(0,a.jsx)(n.h2,{id:"what-is-a-build-path",children:"What is a Build Path"}),"\n",(0,a.jsx)(n.p,{children:"The build path is a combination of a name and an optional location that you\nprovide to Templates. Templates uses this build path to determine where to\nrender your instance."}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"name"})," represents the instance identifier. Templates creates a new directory\nbased on the supplied name\u2014unless told not to\u2014and generates all template\ncontents into that directory. This ",(0,a.jsx)(n.code,{children:"name"})," may also be used internally by the\ntemplate in areas requiring a unique identifier."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"location"})," specifies where Templates should place the new instance. This is\nuseful if you don't want the instance generated in your current directory."]}),"\n",(0,a.jsx)(n.p,{children:"The build path follows a Linux-style file path pattern, and there are four main\nvariations you can use"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Short build path"}),"\n",(0,a.jsx)(n.li,{children:"Long build path"}),"\n",(0,a.jsx)(n.li,{children:"Multiple build paths"}),"\n",(0,a.jsx)(n.li,{children:"No build path"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"short-build-path",children:"Short build path"}),"\n",(0,a.jsxs)(n.p,{children:["A short build path is a build path that only contains a ",(0,a.jsx)(n.code,{children:"name"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"// highlight-next-line\nmy-food-app\n|__________|\n ^ Build path and instance name\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Like mentioned earlier, Templates creates a new directory with this ",(0,a.jsx)(n.code,{children:"name"})," in\nyour cwd. It then renders the template\u2019s contents into that directory and\nassigns the name as the instance\u2019s identifier."]}),"\n",(0,a.jsx)(n.p,{children:"Some examples of this could be:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The name of a react component"}),"\n",(0,a.jsx)(n.li,{children:"The name of your new express app and name in package json"}),"\n",(0,a.jsx)(n.li,{children:"etc, etc"}),"\n"]}),"\n",(0,a.jsxs)(o.R,{children:[(0,a.jsxs)(n.p,{children:["If we were generating a new instance of a template name ",(0,a.jsx)(n.code,{children:"node-server"})," and we\nhave the build path of ",(0,a.jsx)(n.code,{children:"my-food-app"})," then Templates will create a new directory\ncalled ",(0,a.jsx)(n.code,{children:"my-food-app"})," and render all the templates contents inside of it"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"// highlight-start\n| - my-food-app/\n    | - <node-server contents...>\n// highlight-end\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"long-build-path",children:"Long build path"}),"\n",(0,a.jsxs)(n.p,{children:["A long build path is a build path that contains a ",(0,a.jsx)(n.code,{children:"location"})," and ",(0,a.jsx)(n.code,{children:"name"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"// highlight-next-line\nprojects/my-food-app\n|______| |_________|\n^ location    ^ instance name\n|___________________|\n       ^ build path\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Templates still follows all the rules of a single build path. However, the\ndirectory thats created based on the ",(0,a.jsx)(n.code,{children:"name"})," is created inside the ",(0,a.jsx)(n.code,{children:"location"}),"\ndirectory. If the ",(0,a.jsx)(n.code,{children:"location"})," directory doesnt exist it will be created. In case\nabove, ",(0,a.jsx)(n.code,{children:"my-food-app"})," instance will be created in the ",(0,a.jsx)(n.code,{children:"projects"})," directory."]}),"\n",(0,a.jsxs)(o.R,{children:[(0,a.jsxs)(n.p,{children:["If we were generating a new instance of a template named ",(0,a.jsx)(n.code,{children:"node-server"})," and we\nhave the build path ",(0,a.jsx)(n.code,{children:"code/projects/my-food-app"})," then Templates will create a new\ndirectory called ",(0,a.jsx)(n.code,{children:"my-food-app"})," inside of ",(0,a.jsx)(n.code,{children:"<cwd>/code/projects"})," and render all\nthe templates contents inside."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",metastring:'title="Rendered instance"',children:"|- code\n    |- projects\n        // highlight-start\n        | - my-food-app/\n            | - <node-server contents...>\n        // highlight-end\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"multiple-build-paths",children:"Multiple build paths"}),"\n",(0,a.jsx)(n.p,{children:"Multiple build paths are a way to create multiple instances of a template in a\nsingle process. When defining multiple build paths, you can use a mix of short\nand long builds paths:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"projects/my-food-app projects/my-gas-app my-food-app-2\n|__________________| |_________________| |____________|\n    ^ build path 1        ^ build path 2      ^ build path 3\n"})}),"\n",(0,a.jsx)(n.p,{children:"Templates generates an instance for every build path. Each instance is\nindependant and follows the same process as if you were just generating the\nsingle instance. Generating multiple instances may not be ideal for every\ntemplate, but it's especially useful for templates that create sections or\npieces of an existing app\u2014such as new React components, API routes, background\njob files, and more."}),"\n",(0,a.jsxs)(o.R,{children:[(0,a.jsxs)(n.p,{children:["If we were generating a new instance of a template named ",(0,a.jsx)(n.code,{children:"node-server"})," and we\nhave the build paths ",(0,a.jsx)(n.code,{children:"projects/my-food-app"})," & ",(0,a.jsx)(n.code,{children:"projects/my-gas-app"})," then\nemplates will create both instances in the ",(0,a.jsx)(n.code,{children:"projects"})," directory."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",metastring:'title="Rendered instance"',children:"|- projects\n    // highlight-start\n    | - my-food-app/\n        | - <node-server contents...>\n    | - my-gas-app/\n        | - <node-server contents...>\n    // highlight-end\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"no-build-path",children:"No Build path"}),"\n",(0,a.jsx)(n.p,{children:"Some template's dont need a build path to generate a new instance. This is\nbecause they dont need a new folder or any unique instance name to generate your\ncontent. However, you will only be able to generate this instance in the\ndirectory you are located in. Some examples of this can be a eslint\nconfiguration file, jest configuration file, or anything in this similar vain."}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsx)(n.p,{children:"Always refer to the template's documention page to see how they want you to use\ntheir template"})}),"\n",(0,a.jsxs)(o.R,{children:[(0,a.jsxs)(n.p,{children:["If we were generating a new instance of a template named ",(0,a.jsx)(n.code,{children:"eslint"})," and we didnt\nspecific a build path, it could create something like the following:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",metastring:'title="Rendered instance"',children:"|- <cwd>\n    // highlight-start\n    | - <eslint contents...>\n    // highlight-end\n"})})]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Templates allow you to provide a build path to a template that doesn't\nrequire one. Currently, Templates have no way of determining whether a build\npath is required for a given template. However, this behavior may change in\nfuture versions. Always refer to the template's documentation for the\nrecommended usage"})}),"\n",(0,a.jsx)(n.h2,{id:"how-to-generate-a-new-instance",children:"How to generate a new instance"}),"\n",(0,a.jsxs)(n.p,{children:["Our CLI is our primary way to generate new instances of a template. You can\naccess the CLI after ",(0,a.jsx)(n.a,{href:"./intro#installation",children:"installation"})," with the ",(0,a.jsx)(n.code,{children:"tps"}),"\ncommand:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps <template-name> [build-paths...]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Replace ",(0,a.jsx)(n.code,{children:"<template-name>"})," with the name of the template you want to use and add\nany build paths afterward."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Short build path\ntps my-template buildPath1\n\n# Long build path\ntps my-template path/to/dir/buildPath1\n\n# Multiple build paths\ntps my-template buildPath1 path/to/dir/buildPath2\n\n# No build path\ntps my-template\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsxs)(n.p,{children:["Use the ",(0,a.jsx)(n.a,{href:"../api/cli#list",children:"list command"})," to see what templates are available."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps list\n"})})]}),"\n",(0,a.jsxs)(o.R,{children:[(0,a.jsxs)(n.p,{children:["If you wanted to use our ",(0,a.jsx)(n.a,{href:"/templates/docs/main/templates/react-component",children:(0,a.jsx)(n.code,{children:"react-component"})}),"\ntemplate you would replace ",(0,a.jsx)(n.code,{children:"<template-name>"})," with ",(0,a.jsx)(n.code,{children:"react-component"})," and then the\ncomponent you want to create afterwards (E.g.\n",(0,a.jsx)(n.a,{href:"#what-is-a-build-path",children:"build path"}),"). For this demo, well be creating a ",(0,a.jsx)(n.code,{children:"Nav"}),"\ncomponent:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps react-component Nav\n"})}),(0,a.jsx)(n.p,{children:"This will then generate something similar to the follow:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"| - <cwd>\n    | - Nav/\n        | - <react-component contents...>\n"})}),(0,a.jsxs)(n.p,{children:["You can use a ",(0,a.jsx)(n.a,{href:"#long-build-path",children:"long build path"})," if you want to place this\ninstance in a sub directory."]}),(0,a.jsxs)(n.p,{children:["Example, its common for some components like a nav to live in a\n",(0,a.jsx)(n.code,{children:"src/components/"})," directory so using the same\n",(0,a.jsx)(n.a,{href:"/templates/docs/main/templates/react-component",children:(0,a.jsx)(n.code,{children:"react-component"})})," template and component\n",(0,a.jsx)(n.code,{children:"Nav"}),", you can use the following to generate the ",(0,a.jsx)(n.code,{children:"Nav"})," instance in\n",(0,a.jsx)(n.code,{children:"src/components/"}),":"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps react-component src/components/Nav\n"})}),(0,a.jsx)(n.p,{children:"If you want to generate multiple instances at the same time you can use\nsomething similar to the following:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps react-component src/components/Nav src/components/Footer\n"})})]}),"\n",(0,a.jsx)(n.h2,{id:"using-a-templates-options",children:"Using a Template's Options"}),"\n",(0,a.jsx)(n.p,{children:"Template's can define options to make their template more dynamic. Templates\nallows you to use these options in 4 main ways:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Interactive"}),"\n",(0,a.jsx)(n.li,{children:"CLI"}),"\n",(0,a.jsx)(n.li,{children:"Config file"}),"\n",(0,a.jsx)(n.li,{children:"Aliases"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Hidden options are a special type of option that we will cover in the\n",(0,a.jsx)(n.a,{href:"#hidden-options",children:"hidden options section"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"interactive",children:"Interactive"}),"\n",(0,a.jsx)(n.p,{children:"The primary method of answering options is through interactive prompts. When you\ngenerate a new instance of a template, Templates will prompt you in the terminal\nall non hidden options then generate your instance."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps react-component Nav\n? Would you like to use typescript (y/N)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If you press ",(0,a.jsx)(n.code,{children:"Enter"})," without typing anything, Templates will use the option's\ndefault value as the answer. You can also cancel the process by sending an\ninterrupt signal (E.g ",(0,a.jsx)(n.code,{children:"ctrl + c"}),")."]}),"\n",(0,a.jsx)(n.h3,{id:"cli",children:"CLI"}),"\n",(0,a.jsxs)(n.p,{children:["Templates supports using options directly on the command line, allowing you to\nquickly provide answers without going through all the prompts interactively. The\ncommand-line flag for each option corresponds to its name, prefixed with ",(0,a.jsx)(n.code,{children:"--"}),".\nFor example, if an option is named ",(0,a.jsx)(n.code,{children:"hey"}),", the corresponding CLI flag would be\n",(0,a.jsx)(n.code,{children:"--hey"}),". ",(0,a.jsx)(n.strong,{children:"When you provide an answer using a CLI flag, Templates will skip\nprompting for that option."})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps some-template instance1 --optionName [value]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We recommend adding all options after your build path(s) in order to prevent\nneeding a CLI separator ",(0,a.jsx)(n.code,{children:"--"}),"."]}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsx)(l.A,{value:"recommended",label:"Recommended",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps my-template app --option1 value1 --option2 value2 value3\n"})})}),(0,a.jsx)(l.A,{value:"not-recommended",label:"Not Recommended",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps my-template --option1 value1 --option2 value2 value3 -- app\n"})})})]}),"\n",(0,a.jsxs)(o.R,{children:[(0,a.jsxs)(n.p,{children:["To use the ",(0,a.jsx)(n.code,{children:"extension"})," option from\n",(0,a.jsx)(n.a,{href:"/templates/docs/main/templates/react-component",children:(0,a.jsx)(n.code,{children:"react-component"})}),", you can add a\n",(0,a.jsx)(n.code,{children:"--extension"})," flag to the CLI command:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps express-app my-app --extension jsx\n"})})]}),"\n",(0,a.jsx)(n.p,{children:"Now lets go over how to answer different types of prompts:"}),"\n",(0,a.jsx)(n.h6,{id:"boolean",children:"Boolean"}),"\n",(0,a.jsxs)(n.p,{children:["When dealing with options that accept boolean values, specify the option name on\nthe CLI without any value. To use a ",(0,a.jsx)(n.code,{children:"true"})," value, simply use the option name as\nshown below:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"--typescript\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To use a ",(0,a.jsx)(n.code,{children:"false"})," value, add the ",(0,a.jsx)(n.code,{children:"no-"})," prefix in front of the option name:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"--no-typescript\n"})}),"\n",(0,a.jsxs)(o.R,{children:[(0,a.jsxs)(n.p,{children:["To use the ",(0,a.jsx)(n.code,{children:"typescript"})," option from\n",(0,a.jsx)(n.a,{href:"/templates/docs/main/templates/react-component",children:(0,a.jsx)(n.code,{children:"react-component"})}),", you can do the following:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps react-component Nav --typescript\n"})}),(0,a.jsxs)(n.p,{children:["If you don't want to use ",(0,a.jsx)(n.code,{children:"typescript"}),", then you can do the following:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps react-component Nav --no-typescript\n"})})]}),"\n",(0,a.jsx)(n.h6,{id:"single-values",children:"Single values"}),"\n",(0,a.jsx)(n.p,{children:"When dealing with options that accept a single value, specify the option name\nand value afterwards:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'--cssType less\n\n# or a number\n\n--age 23\n\n# or with =\n\n--type=something\n\n# if your value has spaces, wrap it with quotes\n\n--message "hey there everyone"\n'})}),"\n",(0,a.jsxs)(o.R,{children:[(0,a.jsxs)(n.p,{children:["To use the ",(0,a.jsx)(n.code,{children:"cssExtension"})," option from\n",(0,a.jsx)(n.a,{href:"/templates/docs/main/templates/react-component",children:(0,a.jsx)(n.code,{children:"react-component"})}),", you can do the following:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps express-app app --cssExtension react\n"})})]}),"\n",(0,a.jsx)(n.h6,{id:"list",children:"List"}),"\n",(0,a.jsx)(n.p,{children:"When dealing with options that accept a list of values, specify the option name\nand all values afterwards:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'--ages 23 45 65\n\n# or strings\n\n--numbers ten nine five "forty five"\n'})}),"\n",(0,a.jsxs)(o.R,{children:[(0,a.jsxs)(n.p,{children:["To use the ",(0,a.jsx)(n.code,{children:"extras"})," option from a template named ",(0,a.jsx)(n.code,{children:"my-template"}),", you can do the\nfollowing:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps my-template app --extras metrics unit e2e\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"configuration-file",children:"Configuration file"}),"\n",(0,a.jsxs)(n.p,{children:["Templates also support answering options in our\n",(0,a.jsx)(n.a,{href:"/templates/docs/main/tpsrc",children:"configuration file"}),". When adding an answer to our config file,\nTemplates will use this answer when generating a new instance, and you will no\nlonger be prompted for the option."]}),"\n",(0,a.jsxs)(n.p,{children:["To answer a template's option, you need to first specify the template name. Then\nyou can add your answer to the ",(0,a.jsx)(n.code,{children:"answers"})," object, which takes a key/value pair of\noptionName/optionAnswer."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title=".tpsrc"',children:'{\n    "<template-name>": {\n        "answers": {\n            "<option-name>": "<option-answer>"\n        }\n    }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can read more about how to use our configuration file in our\n",(0,a.jsx)(n.a,{href:"/templates/docs/main/tpsrc",children:"configuration guide"}),"."]}),"\n",(0,a.jsxs)(o.R,{children:[(0,a.jsxs)(n.p,{children:["To use the ",(0,a.jsx)(n.code,{children:"typescript"})," option from\n",(0,a.jsx)(n.a,{href:"/templates/docs/main/templates/react-component",children:(0,a.jsx)(n.code,{children:"react-component"})}),", you can add ",(0,a.jsx)(n.code,{children:"true"})," for the\n",(0,a.jsx)(n.code,{children:"typescript"})," option in your config file like the following:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title=".tpsrc"',children:'{\n    "react-component": {\n        "answers": {\n            "typescript": true\n        }\n    }\n}\n'})}),(0,a.jsx)(n.p,{children:"Afterward, you will no longer be prompted if you want to use TypeScript, and\nyour React components will always be generated in TypeScript."})]}),"\n",(0,a.jsx)(n.h3,{id:"aliases",children:"Aliases"}),"\n",(0,a.jsxs)(n.p,{children:["Some Templates option's have aliases that you can use to answer the option. You\ncan find these in the ",(0,a.jsx)(n.code,{children:"aliases"})," column for your template's options. You can use\nthese aliases just like any normal option name. The only exeption is single\ncharater aliases which can be used on the CLI with only one ",(0,a.jsx)(n.code,{children:"-"})," and then the\nsingle charater."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps my-template app -t\n"})}),"\n",(0,a.jsxs)(o.R,{children:[(0,a.jsxs)(n.p,{children:["To use the ",(0,a.jsx)(n.code,{children:"typescript"})," option alias, ",(0,a.jsx)(n.code,{children:"t"}),", from\n",(0,a.jsx)(n.a,{href:"/templates/docs/main/templates/react-component",children:(0,a.jsx)(n.code,{children:"react-component"})}),", you can do the following:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps react-component Nav -t\n"})}),(0,a.jsxs)(n.p,{children:["If you dont want to use ",(0,a.jsx)(n.code,{children:"typescript"}),", then you can do the following:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps react-component Nav --no-typescript\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"hidden-options",children:"Hidden Options"}),"\n",(0,a.jsxs)(n.p,{children:["Hidden options are options that don't get prompted by default. These options\nusually allow for more fine modifications that are too cumbersome to ask every\ntime. You can answer hidden options just like normal prompts (e.g., CLI, config\nfile) with the exception of being asked interactively. In order to have hidden\noptions get prompted, you can use the ",(0,a.jsx)(n.code,{children:"hidden"})," option on the command line when\ngenerating a new instance."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps my-template app --hidden\n"})}),"\n",(0,a.jsx)(n.h2,{id:"core-options",children:"Core Options"}),"\n",(0,a.jsxs)(n.p,{children:["Below will show you how to use some of Template's core options. You can find a\nfull list of these options in the ",(0,a.jsx)(n.a,{href:"/templates/docs/api/template",children:"Templates API docs"}),".\nAll core options can be specified on the CLI or in our\n",(0,a.jsx)(n.a,{href:"/templates/docs/main/tpsrc",children:"config file"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["To use core options on the CLI, use the option name as a flag similar to how you\nwould with ",(0,a.jsx)(n.a,{href:"#cli",children:"template's options"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps my-template app --optionName optionValue\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To use core options in our ",(0,a.jsx)(n.a,{href:"/templates/docs/main/tpsrc",children:"config file"}),", add them to the ",(0,a.jsx)(n.code,{children:"opts"}),"\nobject for the template you want the options to have effect on."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",metastring:'title=".tps/tpsrc"',children:'{\n    "my-template": {\n        "opts": {\n            "optionName": "optionValue"\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsxs)(n.p,{children:["Defining options in our ",(0,a.jsx)(n.a,{href:"/templates/docs/main/tpsrc",children:"config file"})," is only allowed at the\ntemplate level. We don't support defining options that affect all templates.\nHowever, this may change in the future."]})}),"\n",(0,a.jsx)(n.h3,{id:"default",children:"Default"}),"\n",(0,a.jsxs)(n.p,{children:["By default, Templates will prompt you for every non-hidden option that does not\nhave a defined value. To skip all these interactive prompts, you can use the\n",(0,a.jsx)(n.code,{children:"default"})," option which will have Templates use default values for each option."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps my-template app --default\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can use this in conjunction with options on the CLI and in your\n",(0,a.jsx)(n.a,{href:"/templates/docs/main/tpsrc",children:"config file"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps my-template app --default --option1 value1 --option2\n"})}),"\n",(0,a.jsx)(n.h3,{id:"wipe",children:"Wipe"}),"\n",(0,a.jsxs)(n.p,{children:["By default, Templates will throw an error if the directory it needs to create is\nalready created or if any of the files it needs to create are already created.\nTo force the creation of this instance, you can use the ",(0,a.jsx)(n.code,{children:"wipe"})," option. The\n",(0,a.jsx)(n.code,{children:"wipe"})," option will delete any directories or files that Templates need to create\nfirst, then render your instance."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps my-template app --wipe\n"})}),"\n",(0,a.jsx)(n.p,{children:"This is very useful when you want to render a new instance of an instance you\njust created but with different options."}),"\n",(0,a.jsxs)(o.R,{children:[(0,a.jsx)(n.p,{children:"Let's say you have the following directory structure:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"| - app\n    | - .tps/\n        | - ...\n    | - src/\n        // highlight-start\n        | - Home/\n            | - ...\n        // highlight-end\n"})}),(0,a.jsxs)(n.p,{children:["If you were trying to render a new instance of the ",(0,a.jsx)(n.code,{children:"react-component"})," template\nand called this ",(0,a.jsx)(n.code,{children:"Home"}),", tps would error out because a ",(0,a.jsx)(n.code,{children:"Home"})," directory already\nexists. However, if you add the ",(0,a.jsx)(n.code,{children:"--wipe"})," flag, tps will delete this directory\nfirst, then render your new instance in its place."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps react-component src/Home --wipe\n"})}),(0,a.jsx)(n.p,{children:"This will produce:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"| - app\n    | - .tps/\n        | - ...\n    | - src/\n        // highlight-start\n        | - Home/\n            | - <react-component template files ...>\n        // highlight-end\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"force",children:"Force"}),"\n",(0,a.jsxs)(n.p,{children:["Very similar to the ",(0,a.jsx)(n.a,{href:"#wipe",children:(0,a.jsx)(n.code,{children:"wipe"})})," command, the ",(0,a.jsx)(n.code,{children:"force"})," option will force the\ncreation of any files that already exist. The main difference between these\ncommands is that ",(0,a.jsx)(n.code,{children:"wipe"})," deletes folders and files while ",(0,a.jsx)(n.code,{children:"force"})," only overrides\nany files that have conflicts."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps my-template app --force\n"})}),"\n",(0,a.jsx)(n.p,{children:"This is useful when you created an instance and added additional files and\nfolders in your instance but you want to regenerate the instance with different\noptions without losing your additional work."}),"\n",(0,a.jsxs)(o.R,{children:[(0,a.jsx)(n.p,{children:"Let's say you have the following directory structure:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"| - app\n    | - .tps/\n        | - ...\n    | - src/\n        // highlight-start\n        | - Home/\n            | - some-file.js\n        // highlight-end\n"})}),(0,a.jsxs)(n.p,{children:["If you were trying to render a new instance of the ",(0,a.jsx)(n.code,{children:"react-component"})," template\nand called this ",(0,a.jsx)(n.code,{children:"Home"}),", tps would error out because a ",(0,a.jsx)(n.code,{children:"Home"})," directory already\nexists. However, if you add the ",(0,a.jsx)(n.code,{children:"--force"})," flag, tps will force the creation of\nyour instance but will only overwrite conflicting files."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"tps react-component src/Home --force\n"})}),(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(l.A,{value:"no-conflict",label:"No conflicts",children:[(0,a.jsxs)(n.p,{children:["If the ",(0,a.jsx)(n.code,{children:"react-component"})," template doesn't create a ",(0,a.jsx)(n.code,{children:"some-file.js"}),", then the\noriginal file will be left in place and not touched."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"| - app\n    | - .tps/\n        | - ...\n    | - src/\n        | - Home/\n            // highlight-next-line\n            | - some-file.js\n            | - <react-component template files ...>\n"})})]}),(0,a.jsxs)(l.A,{value:"conflict",label:"Conflicting file",children:[(0,a.jsxs)(n.p,{children:["If the ",(0,a.jsx)(n.code,{children:"react-component"})," template was going to render a ",(0,a.jsx)(n.code,{children:"some-file.js"}),", then the\nfile will be overridden by the template's ",(0,a.jsx)(n.code,{children:"some-file.js"}),"."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"| - app\n    | - .tps/\n        | - ...\n    | - src/\n        | - Home/\n            // highlight-next-line\n            | - some-file.js <--- from react-component\n            | - <react-component template files ...>\n"})})]})]})]}),"\n",(0,a.jsx)(n.h3,{id:"extending-directory",children:"Extending Directory"}),"\n",(0,a.jsxs)(n.p,{children:["Templates ",(0,a.jsx)(n.code,{children:"extendDest"})," option allows you to extend each build path with a\nadditional path. This additional path is added to the front of your build path\nand can be used in conjunction with a ",(0,a.jsx)(n.a,{href:"#long-build-path",children:"long build path"}),"."]}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Build Path(s)"}),(0,a.jsx)(n.th,{children:"extendDest"}),(0,a.jsx)(n.th,{children:"Result"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"app"}),(0,a.jsx)(n.td,{children:"myPath/"}),(0,a.jsx)(n.td,{children:"myPath/app"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"subPath/app"}),(0,a.jsx)(n.td,{children:"myPath/"}),(0,a.jsx)(n.td,{children:"myPath/subPath/app"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"app app2"}),(0,a.jsx)(n.td,{children:"myPath/"}),(0,a.jsx)(n.td,{children:"myPath/app myPath/app2"})]})]})]}),"\n",(0,a.jsx)(n.p,{children:"This option is very useful when you know your instances will be generated in a\npaticular directory every time and you dont want to type this out every time."}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(l.A,{value:"config",label:"Config File",children:[(0,a.jsxs)(n.p,{children:["You can add the ",(0,a.jsx)(n.code,{children:"extendDest"})," to the ",(0,a.jsx)(n.code,{children:"opts"})," object in your config file to always append a\npath to every instance you create."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-txt",metastring:'title=".tps/tpsrc"',children:'{\n    "my-template": {\n        "opts": {\n            "extendDest": "path/to/directory",\n        }\n    }\n}\n'})})]}),(0,a.jsx)(l.A,{value:"CLI",label:"CLI Option",children:(0,a.jsx)(n.p,{children:"Sorry, not supported yet! Coming soon..."})})]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},83167:(e,n,t)=>{t.d(n,{R:()=>i});t(96540);var a=t(41622),s=t(74848);const i=e=>{let{children:n,open:t=!1,title:i=""}=e;const l=i?`Example: ${i}`:"Example";return(0,s.jsx)(a.A,{summary:l,open:t,children:(0,s.jsx)("div",{children:n})})}},41622:(e,n,t)=>{t.d(n,{A:()=>j});var a=t(96540),s=t(18215),i=t(15066),l=t(63427),o=t(92303),r=t(41422);const c={details:"details_lb9f",isBrowser:"isBrowser_bmU9",collapsibleContent:"collapsibleContent_i85q"};var d=t(74848);function h(e){return!!e&&("SUMMARY"===e.tagName||h(e.parentElement))}function p(e,n){return!!e&&(e===n||p(e.parentElement,n))}function u(e){let{summary:n,children:t,...s}=e;(0,l.A)().collectAnchor(s.id);const u=(0,o.A)(),m=(0,a.useRef)(null),{collapsed:x,setCollapsed:j}=(0,r.u)({initialState:!s.open}),[f,g]=(0,a.useState)(s.open),y=a.isValidElement(n)?n:(0,d.jsx)("summary",{children:n??"Details"});return(0,d.jsxs)("details",{...s,ref:m,open:f,"data-collapsed":x,className:(0,i.A)(c.details,u&&c.isBrowser,s.className),onMouseDown:e=>{h(e.target)&&e.detail>1&&e.preventDefault()},onClick:e=>{e.stopPropagation();const n=e.target;h(n)&&p(n,m.current)&&(e.preventDefault(),x?(j(!1),g(!0)):j(!0))},children:[y,(0,d.jsx)(r.N,{lazy:!1,collapsed:x,disableSSRStyle:!0,onCollapseTransitionEnd:e=>{j(e),g(!e)},children:(0,d.jsx)("div",{className:c.collapsibleContent,children:t})})]})}const m={details:"details_b_Ee"},x="alert alert--info";function j(e){let{...n}=e;return(0,d.jsx)(u,{...n,className:(0,s.A)(x,m.details,n.className)})}},19365:(e,n,t)=>{t.d(n,{A:()=>l});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function l(e){let{children:n,hidden:t,className:l}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,l),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>v});var a=t(96540),s=t(18215),i=t(23104),l=t(56347),o=t(205),r=t(57485),c=t(31682),d=t(70679);function h(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,l.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,r.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(s.location.search);n.set(i,e),s.replace({...s.location,search:n.toString()})}),[i,s])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,i=p(e),[l,r]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[c,h]=m({queryString:t,groupId:s}),[x,j]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,i]=(0,d.Dv)(t);return[s,(0,a.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:s}),f=(()=>{const e=c??x;return u({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{f&&r(f)}),[f]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);r(e),h(e),j(e)}),[h,j,i]),tabValues:i}}var j=t(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(74848);function y(e){let{className:n,block:t,selectedValue:a,selectValue:l,tabValues:o}=e;const r=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),d=e=>{const n=e.currentTarget,t=r.indexOf(n),s=o[t].value;s!==a&&(c(n),l(s))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=r.indexOf(e.currentTarget)+1;n=r[t]??r[0];break}case"ArrowLeft":{const t=r.indexOf(e.currentTarget)-1;n=r[t]??r[r.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>r.push(e),onKeyDown:h,onClick:d,...i,className:(0,s.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function w(e){let{lazy:n,children:t,selectedValue:i}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function b(e){const n=x(e);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,g.jsx)(y,{...n,...e}),(0,g.jsx)(w,{...n,...e})]})}function v(e){const n=(0,j.A)();return(0,g.jsx)(b,{...e,children:h(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var a=t(96540);const s={},i=a.createContext(s);function l(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);