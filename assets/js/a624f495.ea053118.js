"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[9942],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(a),m=r,h=c["".concat(o,".").concat(m)]||c[m]||u[m]||l;return a?n.createElement(h,i(i({ref:t},d),{},{components:a})):n.createElement(h,i({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6539:(e,t,a)=>{a.d(t,{e:()=>l});var n=a(7294),r=a(4673);const l=e=>{let{children:t,open:a=!1,title:l=""}=e;const i=l?`Example: ${l}`:"Example";return n.createElement(r.Z,{summary:i,open:a},n.createElement("div",null,t))}},4673:(e,t,a)=>{a.d(t,{Z:()=>h});var n=a(7462),r=a(7294),l=a(6010),i=a(2389),s=a(6043);const o={details:"details_lb9f",isBrowser:"isBrowser_bmU9",collapsibleContent:"collapsibleContent_i85q"};function p(e){return!!e&&("SUMMARY"===e.tagName||p(e.parentElement))}function d(e,t){return!!e&&(e===t||d(e.parentElement,t))}function c(e){let{summary:t,children:a,...c}=e;const u=(0,i.Z)(),m=(0,r.useRef)(null),{collapsed:h,setCollapsed:g}=(0,s.u)({initialState:!c.open}),[f,k]=(0,r.useState)(c.open),b=r.isValidElement(t)?t:r.createElement("summary",null,t??"Details");return r.createElement("details",(0,n.Z)({},c,{ref:m,open:f,"data-collapsed":h,className:(0,l.Z)(o.details,u&&o.isBrowser,c.className),onMouseDown:e=>{p(e.target)&&e.detail>1&&e.preventDefault()},onClick:e=>{e.stopPropagation();const t=e.target;p(t)&&d(t,m.current)&&(e.preventDefault(),h?(g(!1),k(!0)):g(!0))}}),b,r.createElement(s.z,{lazy:!1,collapsed:h,disableSSRStyle:!0,onCollapseTransitionEnd:e=>{g(e),k(!e)}},r.createElement("div",{className:o.collapsibleContent},a)))}const u={details:"details_b_Ee"},m="alert alert--info";function h(e){let{...t}=e;return r.createElement(c,(0,n.Z)({},t,{className:(0,l.Z)(m,u.details,t.className)}))}},5162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),r=a(6010);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,i),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>v});var n=a(7462),r=a(7294),l=a(6010),i=a(2466),s=a(6550),o=a(1980),p=a(7392),d=a(12);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function u(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??c(a);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:a}=e;const n=(0,s.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function g(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=u(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[o,p]=h({queryString:a,groupId:n}),[c,g]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,d.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),f=(()=>{const e=o??c;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),g(e)}),[p,g,l]),tabValues:l}}var f=a(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:a,selectedValue:s,selectValue:o,tabValues:p}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),u=e=>{const t=e.currentTarget,a=d.indexOf(t),n=p[a].value;n!==s&&(c(t),o(n))},m=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:u},i,{className:(0,l.Z)("tabs__item",k.tabItem,i?.className,{"tabs__item--active":s===t})}),a??t)})))}function y(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=g(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k.tabList)},r.createElement(b,(0,n.Z)({},e,t)),r.createElement(y,(0,n.Z)({},e,t)))}function v(e){const t=(0,f.Z)();return r.createElement(w,(0,n.Z)({key:String(t)},e))}},7831:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>g,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var n=a(7462),r=(a(7294),a(3905)),l=a(6539),i=a(4866),s=a(5162);const o={pagination_next:"main/create-new-template/packages",pagination_prev:"main/create-new-template/index",sidebar_position:1},p="Templates",d={unversionedId:"main/create-new-template/templates",id:"main/create-new-template/templates",title:"Templates",description:"We will be referring to `` in our guide to represent any directory.",source:"@site/docs/main/create-new-template/templates.mdx",sourceDirName:"main/create-new-template",slug:"/main/create-new-template/templates",permalink:"/templates/docs/main/create-new-template/templates",draft:!1,editUrl:"https://github.com/marcellino-ornelas/templates/tree/master/docs/docs/main/create-new-template/templates.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{pagination_next:"main/create-new-template/packages",pagination_prev:"main/create-new-template/index",sidebar_position:1},sidebar:"docs",previous:{title:"Creating new templates",permalink:"/templates/docs/main/create-new-template/"},next:{title:"Packages",permalink:"/templates/docs/main/create-new-template/packages"}},c={},u=[{value:"Where do templates live",id:"where-do-templates-live",level:2},{value:"Packages",id:"packages",level:2},{value:"Settings file",id:"settings-file",level:2},{value:"Dynamic files",id:"dynamic-files",level:2},{value:"Making a new template",id:"making-a-new-template",level:2},{value:"Rendering a new template",id:"rendering-a-new-template",level:2},{value:"what is rendering a template",id:"what-is-rendering-a-template",level:3},{value:"Single build path",id:"single-build-path",level:3},{value:"Long build path",id:"long-build-path",level:3},{value:"Multiple build paths",id:"multiple-build-paths",level:3},{value:"How to render a template",id:"how-to-render-a-template",level:3}],m={toc:u},h="wrapper";function g(e){let{components:t,...a}=e;return(0,r.kt)(h,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"templates"},"Templates"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"We will be referring to ",(0,r.kt)("inlineCode",{parentName:"p"},"<some-name>")," in our guide to represent any directory.")),(0,r.kt)("p",null,"A tps template is a collection of folders and files that acts as a blueprint for\neffortlessly recreating identical file structures in different locations. Think\nof this as a google doc template but for files and folders. When rendering a tps\ntemplate, the tool scans all the files and directories within the template\nfolder, and renders them in a directory of your preference. Tps also allows you\nto incorporate additional information during the template rendering process,\nresulting in a more dynamic template."),(0,r.kt)("p",null,"Don't worry about all this right now! More will be discussed later on. First,\nlet's start with the basics."),(0,r.kt)("h2",{id:"where-do-templates-live"},"Where do templates live"),(0,r.kt)("p",null,"All TPS templates need to live in a ",(0,r.kt)("inlineCode",{parentName:"p"},".tps")," folder. Subdirectories of the ",(0,r.kt)("inlineCode",{parentName:"p"},".tps"),"\ndirectory are your templates. You may have as many templates as you wish."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"| - .tps/\n    // highlight-next-line\n    | - <template...>/\n")),(0,r.kt)(l.e,{mdxType:"Example"},(0,r.kt)("p",null,"If I were to make a new template called ",(0,r.kt)("code",null,"react-component")," then my\nfolder structure would look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"| - .tps/\n    | - react-component/\n"))),(0,r.kt)("h2",{id:"packages"},"Packages"),(0,r.kt)("p",null,"Now lets break down what to put in your template folder. Inside of each\n",(0,r.kt)("inlineCode",{parentName:"p"},"template")," you can have directories referred to as ",(0,r.kt)("inlineCode",{parentName:"p"},"packages"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"| - .tps/\n    | - <template>/\n        // highlight-next-line\n        | - <packages...>/\n")),(0,r.kt)("p",null,"Now, within each package directory, you have the freedom to add an unlimited\nnumber of files and directories. These resources will be utilized during the\ntemplate rendering process. You are free to name the packages as you wish, with\none exception. While each template can have a ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," package, it is not\nmandatory to specify one."),(0,r.kt)("p",null,"Every time you render a template, tps will automatically utilize all the\ncontents ",(0,r.kt)("em",{parentName:"p"},"(files/directories)")," within your ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," package. For any additional\npackage contents that you wish to include in the rendering process, you must\nexplicitly specify them when rendering the template."),(0,r.kt)("p",null,"Dont worry more will be covered on this in our next section of this guide"),(0,r.kt)(l.e,{open:!0,mdxType:"Example"},(0,r.kt)("p",null,"Lets say we have a template called ",(0,r.kt)("inlineCode",{parentName:"p"},"node-server"),". This template is responsible\nfor setting up a brand new webserver with all the bells and whistles included."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"| - .tps/\n    | - node-server/\n        | - default/\n            // highlight-start\n            | - server.js\n            | - package.json\n            // highlight-end\n")),(0,r.kt)("p",null,"let's say today we had a new idea for a trash removal company called\n",(0,r.kt)("inlineCode",{parentName:"p"},"trash-removal"),". If we wanted to generate this app with our template then it\nwould create a new directory called ",(0,r.kt)("inlineCode",{parentName:"p"},"trash-removal")," and render all files inside\nthe templates ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," package and place them into the new ",(0,r.kt)("inlineCode",{parentName:"p"},"trash-removal"),"\ndirectory it just created"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"| - trash-removal/\n    // highlight-start\n    | - server.js\n    | - package.json\n    // highlight-end\n"))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can learn more about packages in our ",(0,r.kt)("a",{parentName:"p",href:"./packages"},"packages guide"))),(0,r.kt)("h2",{id:"settings-file"},"Settings file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"| - .tps/\n    | - <template>/\n        // highlight-next-line\n        | - settings.json\n")),(0,r.kt)("p",null,"A template can optionally have a settings file where you can define prompts and\nother configuration details. The settings file will be discussed in more detail\nlater in this guide."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can learn more about the settings file in our\n",(0,r.kt)("a",{parentName:"p",href:"./settings"},"settings file guide"))),(0,r.kt)("h2",{id:"dynamic-files"},"Dynamic files"),(0,r.kt)("p",null,"Within each package, you can use dynamic files. Dynamic files are files that end\nwith a ",(0,r.kt)("inlineCode",{parentName:"p"},".dot")," extension. These files enable you to leverage all the features\nprovided by ",(0,r.kt)("a",{parentName:"p",href:"http://olado.github.io/doT/index.html"},"doT")," within tps."),(0,r.kt)("p",null,"Dynamic files provide the capability to pass data and enhance the power of\ndynamic rendering. By utilizing this data, you can leverage the features of doT\nto conditionally render specific sections of code or perform other dynamic\noperations. This allows for more flexibility and customization in your\ntemplates."),(0,r.kt)("h2",{id:"making-a-new-template"},"Making a new template"),(0,r.kt)("p",null,"There is nothing special about a template. Its nothing other than a directory\nholding a collection of files and folders. We could create a template two ways:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Use our command line tool ",(0,r.kt)("em",{parentName:"li"},"(recommended)")),(0,r.kt)("li",{parentName:"ol"},"Create the directories and files with ",(0,r.kt)("inlineCode",{parentName:"li"},"mkdir/touch")," or use Finder etc.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Read more about our command line docs ",(0,r.kt)("a",{parentName:"p",href:"../../api/cli"},"here"))),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"tps",label:"tps cli",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"Our command line tools will create the ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," folder for you."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tps new template <template-name>\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Read more about our ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," command more ",(0,r.kt)("a",{parentName:"p",href:"../../api/cli#new"},"here")))),(0,r.kt)(s.Z,{value:"bash",label:"bash",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir .tps/<template-name>\n\nmkdir .tps/<template-name>/default\n")))),(0,r.kt)("h2",{id:"rendering-a-new-template"},"Rendering a new template"),(0,r.kt)("h3",{id:"what-is-rendering-a-template"},"what is rendering a template"),(0,r.kt)("p",null,"Rendering a new template, also known as template instantiation or the template\ninstantiation process, refers to the action of utilizing a template as a\nstarting point to create a new instance. It involves rendering the files and\nfolders from the template folder and transferring them to the ",(0,r.kt)("strong",{parentName:"p"},"build path(s)"),"."),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("mermaid",{value:'graph LR;\n    step1("User renders\n    template")\n    step2("Tps loads all files\n    and folders from packages")\n    step3("Tps creates a directory\n    for the passed build path")\n    step4("Creates all needed files and\n    folders inside each build path")\n    step1--\x3estep2;\n    step2--\x3estep3;\n    step3--\x3estep4;'}),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"build path")," is the information you provide to TPS to specify the location\nand details of the new template to be created. It can be thought of as the name\nor identifier for the new template. When TPS receives the build path, it creates\na directory with that name and renders all the files and folders from your\ntemplate packages into this newly created directory. In essence, the build path\nacts as a directive to TPS, guiding it in assembling the new template by\norganizing the appropriate files and folders in the designated directory."),(0,r.kt)("h3",{id:"single-build-path"},"Single build path"),(0,r.kt)("p",null,"When the build path is a single word, tps utilizes it as the name for your new\ninstance. It then generates a fresh directory with the given name within the\ncurrent directory you are in, and proceeds to render all contents within the\nnewly created directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"// highlight-next-line\napp\n|__|\n ^ Build path & template name\n")),(0,r.kt)(l.e,{mdxType:"Example"},(0,r.kt)("p",null,"If we were rendering a new instance from a template and we have the build path\n",(0,r.kt)("inlineCode",{parentName:"p"},"app")," then templates will create a new directory called ",(0,r.kt)("inlineCode",{parentName:"p"},"app")," and render all\ncontents inside of it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Template structure"',title:'"Template','structure"':!0},"| - .tps/\n    // highlight-start\n    | - node-server/\n        | - default/\n            | - server.js\n            | - package.json\n    // highlight-end\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Rendered instance"',title:'"Rendered','instance"':!0},"// highlight-start\n| - app/\n    | - server.js\n    | - package.json\n// highlight-end\n"))),(0,r.kt)("h3",{id:"long-build-path"},"Long build path"),(0,r.kt)("p",null,"If you give tps a long build path, it uses it as the path to create your new\ntemplate. The last word becomes the template name, and the words before that\nshow which directory you want the new instance to be in. If the directory doesnt\nexist, tps will create it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"// highlight-next-line\nsome/path/app\n          |__| <- template name\n|____________|\n    ^ Build path\n")),(0,r.kt)(l.e,{mdxType:"Example"},(0,r.kt)("p",null,"If we were rendering a new instance from a template and we have the build path\n",(0,r.kt)("inlineCode",{parentName:"p"},"code/projects/app")," then templates will create a new directory called ",(0,r.kt)("inlineCode",{parentName:"p"},"app"),"\ninside of ",(0,r.kt)("inlineCode",{parentName:"p"},"<cwd>/code/projects")," and render all contents inside of it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Template structure"',title:'"Template','structure"':!0},"| - .tps/\n    // highlight-start\n    | - node-server/\n        | - default/\n            | - server.js\n            | - package.json\n    // highlight-end\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Rendered instance"',title:'"Rendered','instance"':!0},"|- code\n    |- projects\n        // highlight-start\n        | - app/\n            | - server.js\n            | - package.json\n        // highlight-end\n"))),(0,r.kt)("h3",{id:"multiple-build-paths"},"Multiple build paths"),(0,r.kt)("p",null,"You can also pass in multiple build paths at the same time. This is going to be\nthe same as passing in one but for each one."),(0,r.kt)(l.e,{mdxType:"Example"},(0,r.kt)("p",null,"If we were rendering a new instance from a template and we have the build paths\n",(0,r.kt)("inlineCode",{parentName:"p"},"code/projects/app")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"code/projects/app2")," then templates will create new\ndirectories for both and render contents into both of them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Template structure"',title:'"Template','structure"':!0},"| - .tps/\n    // highlight-start\n    | - node-server/\n        | - default/\n            | - server.js\n            | - package.json\n    // highlight-end\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Rendered instance"',title:'"Rendered','instance"':!0},"|- code\n    |- projects\n        // highlight-start\n        | - app/\n            | - server.js\n            | - package.json\n        | - app2/\n            | - server.js\n            | - package.json\n        // highlight-end\n"))),(0,r.kt)("h3",{id:"how-to-render-a-template"},"How to render a template"),(0,r.kt)("p",null,"There are two ways on how to render a template. One is via our command line tool\nor by our ",(0,r.kt)("inlineCode",{parentName:"p"},"node_module")," package. We wont go deep into this topic right now but\nhere are some basics."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<template-to-use>")," is the name of the template you would like to use."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Not sure what templates you have? Check out our\n",(0,r.kt)("a",{parentName:"p",href:"../../api/cli#list"},"list command"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<build-paths...>")," is the location/name of where you want your new rendered\ntemplate to go"),(0,r.kt)(i.Z,{groupId:"cli-node",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"tps",label:"tps cli",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# create command\n\ntps create --use=<template-to-use> <build-paths...>\n\n# or use command\n\ntps <template-to-use> <build-paths...>\n"))),(0,r.kt)(s.Z,{value:"node",label:"Node",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const Templates = require('tps');\n\nconst tps = new Templates('<template-to-use>');\n// ^ In js pass in the name to the template here\n\nconst buildPaths = ['<build-paths...>'];\n// ^ In js build paths should always be an array\n\ntps.render('<some-directory-path>', buildPaths);\n// ^ In js we need to add a path to some directory so tps has a\n// starting directory. tps cli tools uses this node module\n// underneath the hood and uses the terminals current working\n// directory as the `<some-directory-path>` path\n")))),(0,r.kt)("hr",null),(0,r.kt)(l.e,{title:"One Build Path",open:!0,mdxType:"Example"},(0,r.kt)(i.Z,{groupId:"cli-node",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"tps",label:"tps cli",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# create command\n\ntps create --use=express-template app\n\n# or use command\n\ntps express-template app\n\n"))),(0,r.kt)(s.Z,{value:"node",label:"Node",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"showLineNumbers",showLineNumbers:!0},"const Templates = require('tps');\n\nconst tps = new Templates('express-template');\n\nconst buildPaths = ['app'];\n\ntps.render(process.cwd(), buildPaths);\n"))))),(0,r.kt)(l.e,{title:"Long Build Path",mdxType:"Example"},(0,r.kt)(i.Z,{groupId:"cli-node",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"tps",label:"tps cli",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# create command\n\ntps create --use=express-template projects/app\n\n# or use command\n\ntps express-template projects/app\n"))),(0,r.kt)(s.Z,{value:"node",label:"Node",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"showLineNumbers",showLineNumbers:!0},"const Templates = require('tps');\n\nconst tps = new Templates('express-template');\n\nconst buildPaths = ['projects/app'];\n\ntps.render(process.cwd(), buildPaths);\n"))))),(0,r.kt)(l.e,{title:"multiple build path",mdxType:"Example"},(0,r.kt)(i.Z,{groupId:"cli-node",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"tps",label:"tps cli",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# create command\n\ntps create --use=express-template app project/app app2\n\n# or use command\n\ntps express-template app project/app app2\n"))),(0,r.kt)(s.Z,{value:"node",label:"Node",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"showLineNumbers",showLineNumbers:!0},"const Templates = require('tps');\n\nconst tps = new Templates('express-template');\n\nconst buildPaths = ['app', 'projects/app', 'app2'];\n\ntps.render(process.cwd(), buildPaths);\n"))))))}g.isMDXComponent=!0}}]);