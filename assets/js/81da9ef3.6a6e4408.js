"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[6457],{1990:(e,t,n)=>{n.d(t,{o:()=>m});var a=n(7294),s=n(8197),p=n.n(s),r=n(4077),i=n(7346);const l="template_i7AN",o="result_zWjO";p().templateSettings.strip=!1,p().templateSettings.varname="tps";const m=e=>{let{templateName:t="Dot Template",children:n,tps:s={},result:p=!0,templateMeta:m="",resultMeta:u="",lang:d="text"}=e;const c=n.props.children.props.children,h=(0,i.V)({templateString:c,tps:s});return a.createElement("div",null,a.createElement(r.Z,{className:l,showLineNumbers:!0,title:t,language:d,metastring:m},c),p&&a.createElement(r.Z,{title:"Result",className:o,language:d,metastring:u},`${h}`))}},6539:(e,t,n)=>{n.d(t,{e:()=>p});var a=n(7294),s=n(4673);const p=e=>{let{children:t,open:n=!1,title:p=""}=e;const r=p?`Example: ${p}`:"Example";return a.createElement(s.Z,{summary:r,open:n},a.createElement("div",null,t))}},7346:(e,t,n)=>{n.d(t,{V:()=>i});var a=n(7294),s=n(7042),p=n(527);s.Z.templateSettings.strip=!1,s.Z.templateSettings.varname="tps";const r={name:"App",answers:{},utils:p,u:p,a:{}},i=e=>{let{templateString:t,tps:n={},defs:p={}}=e;const[i,l]=(0,a.useState)(null);return(0,a.useEffect)((()=>{let e;try{const a=s.Z.template(t,null,p);console.log({...r,a:n.answers,...n}),e=a({...r,a:n.answers,...n})}catch(a){e=`Error: ${a.message}`}l(e)}),[t,n]),i}},6922:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(7294);const s={name:"App",utils:n(527)},p={React:a,...a,tps:s}},8099:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>m,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var a=n(7462),s=(n(7294),n(3905)),p=n(6539),r=n(1990),i=n(4866),l=n(5162);const o={pagination_next:"main/tpsrc",pagination_prev:"main/create-new-template/settings",sidebar_position:5},m="Prompting",u={unversionedId:"main/create-new-template/prompts",id:"main/create-new-template/prompts",title:"Prompting",description:"What is a prompt",source:"@site/docs/main/create-new-template/prompts.mdx",sourceDirName:"main/create-new-template",slug:"/main/create-new-template/prompts",permalink:"/templates/docs/main/create-new-template/prompts",draft:!1,editUrl:"https://github.com/marcellino-ornelas/templates/tree/master/docs/docs/main/create-new-template/prompts.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{pagination_next:"main/tpsrc",pagination_prev:"main/create-new-template/settings",sidebar_position:5},sidebar:"docs",previous:{title:"Settings File",permalink:"/templates/docs/main/create-new-template/settings"},next:{title:"Configure",permalink:"/templates/docs/main/tpsrc"}},d={},c=[{value:"What is a prompt",id:"what-is-a-prompt",level:2},{value:"How to make a Prompt",id:"how-to-make-a-prompt",level:2},{value:"Name",id:"name",level:3},{value:"Message",id:"message",level:3},{value:"Type",id:"type",level:3},{value:"Tps Type",id:"tps-type",level:3},{value:"package",id:"package",level:4},{value:"boolean",id:"boolean",level:5},{value:"string",id:"string",level:6},{value:"list",id:"list",level:6},{value:"data",id:"data",level:4},{value:"How to answer prompts",id:"how-to-answer-prompts",level:2},{value:"Interactive",id:"interactive",level:3},{value:"Flags",id:"flags",level:3},{value:"boolean",id:"boolean-1",level:6},{value:"string",id:"string-1",level:6},{value:"list",id:"list-1",level:6},{value:"node",id:"node",level:3},{value:"Aliases",id:"aliases",level:3},{value:"Inquirer",id:"inquirer",level:2},{value:"booleans Example",id:"booleans-example",level:3},{value:"Lists Examples",id:"lists-examples",level:3}],h={toc:c},g="wrapper";function k(e){let{components:t,...n}=e;return(0,s.kt)(g,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"prompting"},"Prompting"),(0,s.kt)("h2",{id:"what-is-a-prompt"},"What is a prompt"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f tps react-component Nav\n? Would you like to include unit tests? (true)\n")),(0,s.kt)("p",null,"Prompting is a useful feature that allows you to obtain data from the user. By\ndisplaying a message on the command line, we can request a response from the\nuser. Additionally, prompts can be answered by providing a flag via the command\nline or through the node module package, which is particularly helpful when\nusers already know their desired input. The options for prompts can vary in\nvarious formats."),(0,s.kt)("p",null,"In our system, we utilize the\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/SBoudrias/Inquirer.js/tree/v6.0.0"},"inquirer")," library for\nprompting. This enables you to use any property available in inquirer when\ncreating prompts. For more information on the available properties in inquirer,\nyou can refer to the documentation\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/SBoudrias/Inquirer.js/tree/v6.0.0"},"here"),"."),(0,s.kt)("h2",{id:"how-to-make-a-prompt"},"How to make a Prompt"),(0,s.kt)("p",null,"To add prompts to your template, simply add a ",(0,s.kt)("inlineCode",{parentName:"p"},"prompts")," property to your\nsettings file, which should be an array consisting of the prompts you wish to\npresent to the user. Each prompt will be represented as an object, with varying\nproperties depending on the type of prompt."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        /* prompts ... */\n    ]\n}\n')),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"Don't remember what the setting file is? Refresh your memory in the\n",(0,s.kt)("a",{parentName:"p",href:"./settings"},"settings files guide"))),(0,s.kt)("p",null,"Now lets go over some of the basics. To get a full list of properties check out\nthe ",(0,s.kt)("a",{parentName:"p",href:"../../api/settings/prompt"},"Prompts API documentation")),(0,s.kt)("h3",{id:"name"},"Name"),(0,s.kt)("p",null,"Let's start with the ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," field. This field is essential for enabling\nprompting functionality. All of your prompt answers will be conveniently stored\nunder the ",(0,s.kt)("a",{parentName:"p",href:"../../api/template-context#answers"},(0,s.kt)("inlineCode",{parentName:"a"},"tps.answers"))," object property."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            // highlight-next-line\n            "name": "<some-name>"\n            // ...\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"The name you provide to the prompt will be used in order to access the users\nanswer."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'{{= tps.answers["<name-of-prompt>"]}}\n')),(0,s.kt)(p.e,{mdxType:"Example"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            // highlight-next-line\n            "name": "age"\n            // ...\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"you can access the users answer with:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"{{= tps.answers.age }}\n"))),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"message"},"Message"),(0,s.kt)("p",null,"The second property is ",(0,s.kt)("inlineCode",{parentName:"p"},"message"),". This property will tell inquirer what to ask\nthe user when they are rendering a new instance."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            // highlight-next-line\n            "message": "<some-message>"\n            // ...\n        }\n    ]\n}\n')),(0,s.kt)(p.e,{mdxType:"Example"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            "name": "unit",\n            // highlight-next-line\n            "message": "Would you like to include unit tests?"\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"When the user renders a new instance they will see the message added in your\nprompt"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f tps react-component Nav\n# highlight-next-line\n? Would you like to include unit tests?\n"))),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"type"},"Type"),(0,s.kt)("p",null,"The next property is ",(0,s.kt)("inlineCode",{parentName:"p"},"type"),". This property will tell inquirer what type of\nprompting you would like to use. You can see more about this property in the\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/SBoudrias/Inquirer.js/tree/v6.0.0#question"},"inquirer question docs"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            // highlight-next-line\n            "type": "confirm | input | checkbox | list | rawlist | password"\n            // ...\n        }\n    ]\n}\n')),(0,s.kt)(p.e,{mdxType:"Example"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            "name": "over18",\n            // highlight-next-line\n            "type": "confirm",\n            "message": "Are you over the age of 18?"\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"Produces"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f tps react-component Nav\n? Are you over the age of 18?\n"))),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"tps-type"},"Tps Type"),(0,s.kt)("p",null,"The next field is ",(0,s.kt)("inlineCode",{parentName:"p"},"tpsType"),". This field tells tps how it should process the\nusers answer. There are two options ",(0,s.kt)("inlineCode",{parentName:"p"},"package")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"data"),"."),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"If you don't specify a ",(0,s.kt)("inlineCode",{parentName:"p"},"tpsType")," field. Tps will use ",(0,s.kt)("inlineCode",{parentName:"p"},"package")," by default.")),(0,s.kt)("h4",{id:"package"},"package"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            // highlight-next-line\n            "tpsType": "package"\n            // ...\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"When you have ",(0,s.kt)("inlineCode",{parentName:"p"},"package")," as the ",(0,s.kt)("inlineCode",{parentName:"p"},"tpsType"),", tps will try to use the users value to\nrender a package that is in your template. Different values passed in will have\ndifferent behaviors."),(0,s.kt)("h5",{id:"boolean"},"boolean"),(0,s.kt)("p",null,"In the case where a prompt's answer is a boolean and its value is ",(0,s.kt)("inlineCode",{parentName:"p"},"true"),", Tps\nwill utilize the ",(0,s.kt)("strong",{parentName:"p"},"name")," of the prompt to search for a package with the same\nname. If such a package is found, tps will include it during the rendering\nprocess of the new instance. When the value is ",(0,s.kt)("inlineCode",{parentName:"p"},"false"),", tps will disregard the\nprompt and do nothing."),(0,s.kt)("admonition",{type:"important"},(0,s.kt)("p",{parentName:"admonition"},"Prompts of type ",(0,s.kt)("inlineCode",{parentName:"p"},"confirm")," will return their answers as booleans.")),(0,s.kt)(p.e,{mdxType:"Example"},(0,s.kt)("p",null,"Say were rendering a new ",(0,s.kt)("inlineCode",{parentName:"p"},"express-app")," instance and we have a prompt like so"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            "name": "unit",\n            "tpsType": "package",\n            "type": "confirm",\n            "message": "Do you want to include unit tests?"\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"since this is declared as a package type, this needs a corresponding package in\nthe template"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"| - .tps/\n    | - express-app/\n        | settings.json\n        | - default/\n            | - server.js\n        // highlight-next-line\n        | - unit/        <-- matches name of prompt\n            | - server.test.js\n")),(0,s.kt)("p",null,"When the user is rendering a new template, the prompt will be displayed and they\ncan answer."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f tps express-app newApp\n? Would you like to include unit tests?\n")),(0,s.kt)("p",null,"Depending on what the user answers depends on what will happen:"),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"yes",label:"User answers yes",mdxType:"TabItem"},(0,s.kt)("p",null,"If user answers ",(0,s.kt)("inlineCode",{parentName:"p"},"yes"),", then the ",(0,s.kt)("inlineCode",{parentName:"p"},"unit")," package will be included in the rendering\nprocess so a ",(0,s.kt)("inlineCode",{parentName:"p"},"server.test.js")," will be added"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"| - newApp/\n    | - server.js\n    // highlight-next-line\n    | - server.test.js\n"))),(0,s.kt)(l.Z,{value:"no",label:"User answers no",mdxType:"TabItem"},(0,s.kt)("p",null,"If user answers ",(0,s.kt)("inlineCode",{parentName:"p"},"no"),", then the ",(0,s.kt)("inlineCode",{parentName:"p"},"unit")," package will not be include in the\nrendering process so no ",(0,s.kt)("inlineCode",{parentName:"p"},"server.test.js"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"| - newApp/\n    | - server.js\n"))))),(0,s.kt)("h6",{id:"string"},"string"),(0,s.kt)("p",null,"When a prompt's answer is a string, word or name, tps will take that answer and\nattempt to find a package that corresponds to it. If one is found then tps will\ninclude it in the rendering process."),(0,s.kt)("admonition",{type:"important"},(0,s.kt)("p",{parentName:"admonition"},"Prompts of type ",(0,s.kt)("inlineCode",{parentName:"p"},"list")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"input")," will return their answers as strings.")),(0,s.kt)(p.e,{mdxType:"Example"},(0,s.kt)("p",null,"Say were rendering a new ",(0,s.kt)("inlineCode",{parentName:"p"},"express-app")," instance and we have a prompt like so"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            "name": "framework",\n            "tpsType": "package",\n            "message": "What type of frontend framework would you like to use?",\n            // highlight-start\n            "type": "list", // <--- makes prompt accept strings\n            "choices": ["react", "angular"]\n            // highlight-end\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"since this is declared as a package type, the choices to the question must match\na package in our template."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"| - .tps/\n    | - express-app/\n        | settings.json\n        | - default/\n            | - server.js\n        // highlight-start\n        | - react/\n            | - react.js\n        | - angular/\n            | - angular.js\n        // highlight-end\n")),(0,s.kt)("p",null,"When the user is rendering a new instance, the prompt will be displayed and the\nuser can answer."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f tps express-app newApp\n? What type of framework would you like to use?\n> react\n  angular\n")),(0,s.kt)("p",null,"With the choice the user selects, tps will then include a package that matches\nthe answer"),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"react",label:"User answers react",mdxType:"TabItem"},(0,s.kt)("p",null,"If user answers ",(0,s.kt)("inlineCode",{parentName:"p"},"react"),", then the ",(0,s.kt)("inlineCode",{parentName:"p"},"react")," package will be included in the\nrendering process so a ",(0,s.kt)("inlineCode",{parentName:"p"},"react.js")," will be added"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"| - newApp/\n    | - server.js\n    // highlight-next-line\n    | - react.js\n"))),(0,s.kt)(l.Z,{value:"angular",label:"User answers angular",mdxType:"TabItem"},(0,s.kt)("p",null,"If user answers ",(0,s.kt)("inlineCode",{parentName:"p"},"angular"),", then the ",(0,s.kt)("inlineCode",{parentName:"p"},"angular")," package will be included in the\nrendering process so a ",(0,s.kt)("inlineCode",{parentName:"p"},"angular.js")," will be added"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"| - newApp/\n    | - server.js\n    // highlight-next-line\n    | - angular.js\n"))))),(0,s.kt)("h6",{id:"list"},"list"),(0,s.kt)("p",null,"If a prompt's answer consists of a list of strings, tps will consider each\nindividual answer and locate the corresponding packages associated with them.\nThese packages will then be included during the rendering process."),(0,s.kt)("admonition",{type:"important"},(0,s.kt)("p",{parentName:"admonition"},"Prompts of type ",(0,s.kt)("inlineCode",{parentName:"p"},"checkbox")," will return their answer as list of strings.")),(0,s.kt)(p.e,{mdxType:"Example"},(0,s.kt)("p",null,"Say were rendering a new ",(0,s.kt)("inlineCode",{parentName:"p"},"express-app")," instance and we have a prompt like so"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            "name": "extras",\n            "message": "Would you like to include any other features?",\n            "tpsType": "package",\n            // highlight-start\n            "type": "checkbox", // <--- makes prompt accept list of strings\n            "choices": ["metrics", "unit", "e2e", "api"]\n            // highlight-end\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"since this is declared as a package type, the choices to the question must match\na package in our template."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"| - .tps/\n    | - express-app/\n        | settings.json\n        | - default/\n            | - server.js\n        // highlight-start\n        | - metrics/\n            | - metrics.js\n        | - unit/\n            | - server.test.js\n        | - e2e/\n            | - website.test.js\n        | - api/\n            | - api.js\n        // highlight-end\n")),(0,s.kt)("p",null,"When the user renders a new template. tps will ask for an list of inputs.\nWhatever the user answers, tps will take all of the values and try to find a\npackages that matches the answers."),(0,s.kt)("p",null,"If the user answers ",(0,s.kt)("inlineCode",{parentName:"p"},"metrics")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"unit")," then both packages will be included in\nthe rendering process"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"| - newApp/\n    // highlight-next-line\n    | - metrics.js\n    // highlight-next-line\n    | - server.test.js\n    | - server.js\n"))),(0,s.kt)("h4",{id:"data"},"data"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "prompts": [\n        {\n            // highlight-next-line\n            "tpsType": "data"\n            // ...\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"When the ",(0,s.kt)("inlineCode",{parentName:"p"},"tpsType")," is set to ",(0,s.kt)("inlineCode",{parentName:"p"},"data"),", tps will leave the data untouched. This\ndata type is designed to allow you to retrieve additional information from the\nuser, which you can then process according to your specific needs. One common\nuse case for this is to conditionally render specific code within the file based\non the user's response to a certain question. Any inquirer ",(0,s.kt)("a",{parentName:"p",href:"#type"},"type")," can be\nused."),(0,s.kt)(p.e,{mdxType:"Example"},(0,s.kt)("p",null,"Say were rendering a new ",(0,s.kt)("inlineCode",{parentName:"p"},"express-app")," instance and we have a prompt like so"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            "name": "security",\n            "message": "Would you like to include common express security packages?",\n            "tpsType": "data",\n            // highlight-start\n            "type": "confirm" // <--- makes prompt accept boolean\n            // highlight-end\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"When the user is rendering a new instance, the prompt will be displayed and the\nuser can answer. Whatever the user answers will now be available for use in your\ndynamic files."),(0,s.kt)(r.o,{lang:"js",tps:{answers:{security:!0}},mdxType:"Dot"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'const express = require("express");\n\nconst app = express();\n\n/* node code ... */\n\n{{? tps.answers.security }}app.use(helmet());{{?}}\n\n/* node code ... */\n')))),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"how-to-answer-prompts"},"How to answer prompts"),(0,s.kt)("h3",{id:"interactive"},"Interactive"),(0,s.kt)("p",null,"The primary method of answering prompts is through interactive prompts. When you\ngenerate a new instance of a template, tps will prompt the user to provide\nanswers until all the prompts are completed. This interactive mode is also the\ndefault way to respond to prompts."),(0,s.kt)("h3",{id:"flags"},"Flags"),(0,s.kt)("p",null,"Tps also supports answering prompt questions through command line flags. This\nfeature enables users to obtain their desired results directly without having to\ngo through all the prompts interactively. The flag's name will correspond to the\nprompt's name specified in your settings file."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"tps some-template app --some-flag <some-value>\n")),(0,s.kt)(p.e,{mdxType:"Example"},(0,s.kt)("p",null,"If we were rendering a new instance using the ",(0,s.kt)("inlineCode",{parentName:"p"},"express-app")," template and had\nthis settings file"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            // highlight-next-line\n            "name": "unit",\n            "message": "Would you like to include unit tests?",\n            "tpsType": "package",\n            "type": "confirm"\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"The user can answer this prompts questions by adding a ",(0,s.kt)("inlineCode",{parentName:"p"},"unit")," command line flag"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"tps express-app app --unit\n"))),(0,s.kt)("p",null,"Now lets go over how to answer different types of prompts"),(0,s.kt)("h6",{id:"boolean-1"},"boolean"),(0,s.kt)("p",null,"When dealing with boolean values, such as those from a confirm prompt, you have\nthe option to answer the prompt using a flag with the same name as the prompt.\nTo answer with ",(0,s.kt)("inlineCode",{parentName:"p"},"true"),", simply use:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"--unit\n")),(0,s.kt)("p",null,"On the other hand, if you want to provide a ",(0,s.kt)("inlineCode",{parentName:"p"},"false")," value, add ",(0,s.kt)("inlineCode",{parentName:"p"},"no-")," before the\nflag name:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"--no-unit\n")),(0,s.kt)(p.e,{mdxType:"Example"},(0,s.kt)("p",null,"If we were rendering a new instance using the ",(0,s.kt)("inlineCode",{parentName:"p"},"express-app")," template and had\nthis settings file"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            // highlight-next-line\n            "name": "unit",\n            "message": "Would you like to include unit tests?",\n            "tpsType": "package",\n            "type": "confirm"\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"The user can answer this prompts questions by adding a ",(0,s.kt)("inlineCode",{parentName:"p"},"unit")," command line flag"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"tps express-app app --unit\n"))),(0,s.kt)("h6",{id:"string-1"},"string"),(0,s.kt)("p",null,"When dealing with string values, such as those from a input or list prompts, add\nthe value right after your flag"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'--cssType less\n\n# or if you need a number\n\n--age 23\n\n# if your value has spaces then you need to do this\n\n--message "hey there everyone"\n')),(0,s.kt)(p.e,{mdxType:"Example"},(0,s.kt)("p",null,"If we were rendering a new instance using the ",(0,s.kt)("inlineCode",{parentName:"p"},"express-app")," template and had\nthis settings file"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            // highlight-next-line\n            "name": "framework",\n            "message": "What frontend package would you like to include",\n            "tpsType": "package",\n            "type": "list",\n            "choices": ["react", "angular", "vue"]\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"The user can answer this prompts questions by adding a ",(0,s.kt)("inlineCode",{parentName:"p"},"framework")," command line\nflag and adding the value after the flag named"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"tps express-app app --framework react\n"))),(0,s.kt)("h6",{id:"list-1"},"list"),(0,s.kt)("p",null,"If the value type is an list then you end up with something like this."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"--ages 23 45 65\n\n# or strings\n\n--numbers ten nine five\n")),(0,s.kt)(p.e,{mdxType:"Example"},(0,s.kt)("p",null,"If we were rendering a new instance using the ",(0,s.kt)("inlineCode",{parentName:"p"},"express-app")," template and had\nthis settings file"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            "name": "extras",\n            "message": "Would you like to include any other features?",\n            "tpsType": "package",\n            "type": "checkbox", // <--- makes prompt accept list of strings\n            "choices": ["metrics", "unit", "e2e", "api"]\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"The user can answer this prompts questions by adding a ",(0,s.kt)("inlineCode",{parentName:"p"},"extras")," flag and putting\nthe values after the flag name"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"tps express-app app --extras metrics unit e2e\n"))),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Using list types can be difficult when using multiple flags etc. yargs is used\nfor its command line parser. You can refer how to pass in list of arguments\n",(0,s.kt)("a",{parentName:"p",href:"http://yargs.js.org/docs/#api-reference-arraykey"},"here")),(0,s.kt)("p",{parentName:"admonition"},"When using lists on the command line it is recommended to add the flag after all\nrequired fields:"),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"bad",label:"Bad",mdxType:"TabItem"},(0,s.kt)("p",{parentName:"admonition"},"when using lists on the command line before all required params, you have to add\na extra ",(0,s.kt)("inlineCode",{parentName:"p"},"--")," after the list flag so yargs can parse the require params correctly"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"tps express-app --extras metrics api unit -- app\n"))),(0,s.kt)(l.Z,{value:"good",label:"Good",mdxType:"TabItem"},(0,s.kt)("p",{parentName:"admonition"},"Move the list param to the end of the command in order to prevent this extra\nadition"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"tps express-app app --extras metrics api unit\n\n# Addition flags\n\ntps express-app app --extras metrics api unit --some-other-flag\n"))))),(0,s.kt)("h3",{id:"node"},"node"),(0,s.kt)("p",null,"To answer prompts in javascript using the module. Use the ",(0,s.kt)("inlineCode",{parentName:"p"},"setAnswers")," function."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const Templates = require('tps');\n\nconst tps = new Templates('react-component');\n\n/**\n * Just like the command line passing in data supports strings, numbers, and arrays\n * @example string\n *  const data = '23';\n * @example number\n *  const data = 23;\n * @example boolean\n *  const data = true;\n * @example array\n *  const data = [23, 45, 65];\n */\nconst age = 23;\n\ntps.setAnswers({ age });\n")),(0,s.kt)("h3",{id:"aliases"},"Aliases"),(0,s.kt)("p",null,"Aliases are commonly used for command line flags, providing convenient shortcuts\nfor better interaction. To enhance usability, tps enables you to assign aliases\nto your prompts. These aliases can be utilized to answer prompts either through\nthe command line or via the node module, offering flexible options for prompt\nhandling."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            "name": "framework",\n            /* ... */\n            "aliases": ["<alias-name>"]\n        }\n    ]\n}\n')),(0,s.kt)(p.e,{mdxType:"Example"},(0,s.kt)("p",null,"If we were rendering a new instance using the ",(0,s.kt)("inlineCode",{parentName:"p"},"express-app")," template and had\nthis settings file"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            "name": "framework",\n            "choices": ["react", "vue", "angular"],\n            /* ... */\n            "aliases": ["f"]\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"Now we can answer the prompt question via the alias"),(0,s.kt)(i.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"command-line",label:"Command line",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"tps express-app app -f react\n"))),(0,s.kt)(l.Z,{value:"node",label:"Node",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const Templates = require('tps');\n\nconst tps = new Templates('express-app');\n\ntps.setAnswers({ f: 'react' });\n"))))),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"inquirer"},"Inquirer"),(0,s.kt)("p",null,"Like mentioned before, Tps uses inquirer for prompting. This mean we can use any\nof inquirer properties also. Here are some examples:"),(0,s.kt)("h3",{id:"booleans-example"},"booleans Example"),(0,s.kt)("p",null,"Say you have this react component template:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"| - tps-example\n    | - .tps/\n        | - react-component/\n            | - settings.json\n            | - default/\n                | - index.js\n            | - css\n                | - {{=tps.name}}.css\n")),(0,s.kt)("p",null,"Adding this prompt will allow you to conditionally render the css package"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            "name": "css",\n            "type": "confirm",\n            "message": "Would you like to add a css file?"\n        }\n    ]\n}\n')),(0,s.kt)("p",null,"Now if the user answers true like so:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"tps react-component App --css\n")),(0,s.kt)("p",null,"then this will be the new template:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"    | - tps-example\n        | - .tps/\n            | - ...\n        | - App\n           | - index.js\n           | - App.css\n")),(0,s.kt)("p",null,"Now if the user answers false like so:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"tps react-component App --no-css\n")),(0,s.kt)("p",null,"then this will be the new template:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"    | - tps-example\n        | - .tps/\n            | - ...\n        | - App\n           | - index.js\n")),(0,s.kt)("h3",{id:"lists-examples"},"Lists Examples"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="settings.json"',title:'"settings.json"'},'{\n    "prompts": [\n        {\n            "name": "modules",\n            "type": "checkbox",\n            "choices": ["react", "express", "fs", "path"],\n            "tpsType": "data",\n            "message": "What node modules would you like to import into this js file?"\n        }\n    ]\n}\n')))}k.isMDXComponent=!0}}]);