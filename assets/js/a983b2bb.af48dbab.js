(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[2782],{641:(e,n,t)=>{"use strict";t.d(n,{c:()=>u});var a=t(96540),s=t(41919),l=t.n(s),r=t(63221),o=t(762);const i="template_i7AN",p="noResult_yKxs",c="result_zWjO",m="noTemplate_JA2s";l().templateSettings.strip=!1,l().templateSettings.varname="tps";const u=e=>{let{templateName:n="Dot Template",resultName:t="Result",children:s,tps:l={},defs:u={},result:d=!0,displayTemplate:g=!0,templateMeta:y="",resultMeta:f="",lang:h="text"}=e;const w=s.props.children.props.children,N=(0,o.n)({templateString:w,tps:l,defs:u}),b=[i],x=[c];return g||x.push(m),d||b.push(p),a.createElement("div",null,g&&a.createElement(r.A,{className:b.join(" "),showLineNumbers:!0,title:n,language:h,metastring:y},w),d&&a.createElement(r.A,{title:t,className:x.join(" "),showLineNumbers:!0,language:h,metastring:f},`${N}`))}},83167:(e,n,t)=>{"use strict";t.d(n,{R:()=>l});var a=t(96540),s=t(41622);const l=e=>{let{children:n,open:t=!1,title:l=""}=e;const r=l?`Example: ${l}`:"Example";return a.createElement(s.A,{summary:r,open:t},a.createElement("div",null,n))}},41622:(e,n,t)=>{"use strict";t.d(n,{A:()=>g});var a=t(58168),s=t(96540),l=t(20053),r=t(92303),o=t(41422);const i={details:"details_lb9f",isBrowser:"isBrowser_bmU9",collapsibleContent:"collapsibleContent_i85q"};function p(e){return!!e&&("SUMMARY"===e.tagName||p(e.parentElement))}function c(e,n){return!!e&&(e===n||c(e.parentElement,n))}function m(e){let{summary:n,children:t,...m}=e;const u=(0,r.A)(),d=(0,s.useRef)(null),{collapsed:g,setCollapsed:y}=(0,o.u)({initialState:!m.open}),[f,h]=(0,s.useState)(m.open),w=s.isValidElement(n)?n:s.createElement("summary",null,n??"Details");return s.createElement("details",(0,a.A)({},m,{ref:d,open:f,"data-collapsed":g,className:(0,l.A)(i.details,u&&i.isBrowser,m.className),onMouseDown:e=>{p(e.target)&&e.detail>1&&e.preventDefault()},onClick:e=>{e.stopPropagation();const n=e.target;p(n)&&c(n,d.current)&&(e.preventDefault(),g?(y(!1),h(!0)):y(!0))}}),w,s.createElement(o.N,{lazy:!1,collapsed:g,disableSSRStyle:!0,onCollapseTransitionEnd:e=>{y(e),h(!e)}},s.createElement("div",{className:i.collapsibleContent},t)))}const u={details:"details_b_Ee"},d="alert alert--info";function g(e){let{...n}=e;return s.createElement(m,(0,a.A)({},n,{className:(0,l.A)(d,u.details,n.className)}))}},19365:(e,n,t)=>{"use strict";t.d(n,{A:()=>r});var a=t(96540),s=t(20053);const l={tabItem:"tabItem_Ymn6"};function r(e){let{children:n,hidden:t,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.A)(l.tabItem,r),hidden:t},n)}},11470:(e,n,t)=>{"use strict";t.d(n,{A:()=>x});var a=t(58168),s=t(96540),l=t(20053),r=t(23104),o=t(56347),i=t(57485),p=t(31682),c=t(89466);function m(e){return function(e){return s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}function u(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??m(t);return function(e){const n=(0,p.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.W6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,i.aZ)(l),(0,s.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(a.location.search);n.set(l,e),a.replace({...a.location,search:n.toString()})}),[l,a])]}function y(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,l=u(e),[r,o]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:l}))),[i,p]=g({queryString:t,groupId:a}),[m,y]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,l]=(0,c.Dv)(t);return[a,(0,s.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:a}),f=(()=>{const e=i??m;return d({value:e,tabValues:l})?e:null})();(0,s.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:r,selectValue:(0,s.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),y(e)}),[p,y,l]),tabValues:l}}var f=t(92303);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function w(e){let{className:n,block:t,selectedValue:o,selectValue:i,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,r.a_)(),u=e=>{const n=e.currentTarget,t=c.indexOf(n),a=p[t].value;a!==o&&(m(n),i(a))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":t},n)},p.map((e=>{let{value:n,label:t,attributes:r}=e;return s.createElement("li",(0,a.A)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>c.push(e),onKeyDown:d,onClick:u},r,{className:(0,l.A)("tabs__item",h.tabItem,r?.className,{"tabs__item--active":o===n})}),t??n)})))}function N(e){let{lazy:n,children:t,selectedValue:a}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},l.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function b(e){const n=y(e);return s.createElement("div",{className:(0,l.A)("tabs-container",h.tabList)},s.createElement(w,(0,a.A)({},e,n)),s.createElement(N,(0,a.A)({},e,n)))}function x(e){const n=(0,f.A)();return s.createElement(b,(0,a.A)({key:String(n)},e))}},762:(e,n,t)=>{"use strict";t.d(n,{n:()=>o});var a=t(96540),s=t(7291),l=t(5565);s.A.templateSettings.strip=!1,s.A.templateSettings.varname="tps";const r={name:"App",answers:{},utils:l,u:l,a:{}},o=e=>{let{templateString:n,tps:t={},defs:l={}}=e;const[o,i]=(0,a.useState)(null);return(0,a.useEffect)((()=>{let e;try{const a=s.A.template(n,null,l);console.log({...r,a:t.answers,...t}),e=a({...r,a:t.answers,...t})}catch(a){e=`Error: ${a.message}`}i(e)}),[n,t]),o}},51433:(e,n,t)=>{"use strict";t.d(n,{A:()=>l});var a=t(96540);const s={name:"App",utils:t(5565)},l={React:a,...a,tps:s}},7291:(e,n)=>{"use strict";var t={},a={name:"doT",version:"1.1.1",templateSettings:{evaluate:/\{\{([\s\S]+?(\}?)+)\}\}/g,evaluateBlock:/^[^\S\r\n]*?\{\{\{([\s\S]+?(\}?)+)\}\}\}[^\S\r\n]*\n?/gm,interpolate:/\{\{=([\s\S]+?)\}\}/g,encode:/\{\{!([\s\S]+?)\}\}/g,use:/\{\{#([\s\S]+?)\}\}/g,useParams:/(^|[^\w$])def(?:\.|\[[\'\"])([\w$\.]+)(?:[\'\"]\])?\s*\:\s*([\w$\.]+|\"[^\"]+\"|\'[^\']+\'|\{[^\}]+\})/g,define:/\{\{##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\}\}/g,defineBlock:/^[^\S\r\n]*?\{\{\{##\s*([\w\.$]+)\s*(\:|=)\n?([\s\S]+?)\n?#\}\}\}[^\S\r\n]*\n?/gm,defineParams:/^\s*([\w$]+):([\s\S]+)/,defineBlockParams:/^\s*([\w$]+):\n?([\s\S]+)/,conditional:/\{\{\?(\?)?\s*([\s\S]*?)\s*\}\}/g,conditionalBlock:/^[^\S\r\n]*?\{\{\{\?(\?)?\s*([\s\S]*?)\s*\}\}\}[^\S\r\n]*\n?/gm,iterate:/\{\{~\s*(?:\}\}|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\}\})/g,iterateBlock:/[^\S\r\n]*?\{\{\{~\s*(?:\}\}\}[^\S\r\n]*\n?|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\}\}\}[^\S\r\n]*\n?)/gm,varname:"tps",strip:!1,append:!0,selfcontained:!1,doNotSkipEncoded:!1},template:void 0,log:!0};t.dot=a,a.encodeHTMLSource=function(e){var n={"&":"&#38;","<":"&#60;",">":"&#62;",'"':"&#34;","'":"&#39;","/":"&#47;"},t=e?/[&<>"'\/]/g:/&(?!#?\w+;)|<|>|"|'|\//g;return function(e){return e?e.toString().replace(t,(function(e){return n[e]||e})):""}};var s={append:{start:"'+(",end:")+'",startencode:"'+encodeHTML("},split:{start:"';out+=(",end:");out+='",startencode:"';out+=encodeHTML("}},l=/$^/;function r(e,n,t){return("string"==typeof n?n:n.toString()).replace(e.defineBlock||l,(function(n,a,s,l){return 0===a.indexOf("def.")&&(a=a.substring(4)),a in t||(":"===s?(e.defineBlockParams&&l.replace(e.defineBlockParams,(function(e,n,s){t[a]={arg:n,text:s}})),a in t||(t[a]=l)):new Function("def","def['"+a+"']="+l)(t)),""})).replace(e.define||l,(function(n,a,s,l){return 0===a.indexOf("def.")&&(a=a.substring(4)),a in t||(":"===s?(e.defineParams&&l.replace(e.defineParams,(function(e,n,s){t[a]={arg:n,text:s}})),a in t||(t[a]=l)):new Function("def","def['"+a+"']="+l)(t)),""})).replace(e.use||l,(function(n,a){e.useParams&&(a=a.replace(e.useParams,(function(e,n,a,s){if(t[a]&&t[a].arg&&s){var l=(a+":"+s).replace(/'|\\/g,"_");return t.__exp=t.__exp||{},t.__exp[l]=t[a].text.replace(new RegExp("(^|[^\\w$])"+t[a].arg+"([^\\w$])","g"),"$1"+s+"$2"),n+"def.__exp['"+l+"']"}})));var s=new Function("def","return "+a)(t);return s?r(e,s,t):s}))}function o(e){return e.replace(/\\('|\\)/g,"$1").replace(/[\r\t\n]/g," ")}a.template=function(e,n,i){var p,c,m=(n=n||a.templateSettings).append?s.append:s.split,u=0,d=n.use||n.define?r(n,e,i||{}):e;d=("var out='"+(n.strip?d.replace(/(^|\r|\n)\t* +| +\t*(\r|\n|$)/g," ").replace(/\r|\n|\t|\/\*[\s\S]*?\*\//g,""):d).replace(/'|\\/g,"\\$&").replace(n.interpolate||l,(function(e,n){return m.start+o(n)+m.end})).replace(n.encode||l,(function(e,n){return p=!0,m.startencode+o(n)+m.end})).replace(n.conditionalBlock||l,(function(e,n,t){return n?t?"';}else if("+o(t)+"){out+='":"';}else{out+='":t?"';if("+o(t)+"){out+='":"';}out+='"})).replace(n.conditional||l,(function(e,n,t){return n?t?"';}else if("+o(t)+"){out+='":"';}else{out+='":t?"';if("+o(t)+"){out+='":"';}out+='"})).replace(n.iterateBlock||l,(function(e,n,t,a){return n?(u+=1,c=a||"i"+u,n=o(n),"';var arr"+u+"="+n+";if(arr"+u+"){var "+t+","+c+"=-1,l"+u+"=arr"+u+".length-1;while("+c+"<l"+u+"){"+t+"=arr"+u+"["+c+"+=1];out+='"):"';} } out+='"})).replace(n.iterate||l,(function(e,n,t,a){return n?(u+=1,c=a||"i"+u,n=o(n),"';var arr"+u+"="+n+";if(arr"+u+"){var "+t+","+c+"=-1,l"+u+"=arr"+u+".length-1;while("+c+"<l"+u+"){"+t+"=arr"+u+"["+c+"+=1];out+='"):"';} } out+='"})).replace(n.evaluateBlock||l,(function(e,n){return"';"+o(n)+"out+='"})).replace(n.evaluate||l,(function(e,n){return"';"+o(n)+"out+='"}))+"';return out;").replace(/\n/g,"\\n").replace(/\t/g,"\\t").replace(/\r/g,"\\r").replace(/(\s|;|\}|^|\{)out\+='';/g,"$1").replace(/\+''/g,""),p&&(n.selfcontained||!t||t._encodeHTML||(t._encodeHTML=a.encodeHTMLSource(n.doNotSkipEncoded)),d="var encodeHTML = typeof _encodeHTML !== 'undefined' ? _encodeHTML : ("+a.encodeHTMLSource.toString()+"("+(n.doNotSkipEncoded||"")+"));"+d);try{return new Function(n.varname,d)}catch(g){throw"undefined"!=typeof console&&console.log("Could not create a template function: "+d),g}},a.compile=function(e,n){return a.template(e,null,n)},n.A=a},5565:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.transform=n.ordinalize=n.foreignKey=n.classify=n.tableize=n.demodulize=n.titleize=n.dasherize=n.capitalize=n.humanize=n.underscore=n.camelize=n.inflect=n.singularize=n.pluralize=n.snakeCase=n.sentenceCase=n.pathCase=n.pascalCase=n.paramCase=n.noCase=n.headerCase=n.dotCase=n.constantCase=n.capitalCase=n.camelCase=void 0;var a=t(89605);Object.defineProperty(n,"camelCase",{enumerable:!0,get:function(){return a.camelCase}}),Object.defineProperty(n,"capitalCase",{enumerable:!0,get:function(){return a.capitalCase}}),Object.defineProperty(n,"constantCase",{enumerable:!0,get:function(){return a.constantCase}}),Object.defineProperty(n,"dotCase",{enumerable:!0,get:function(){return a.dotCase}}),Object.defineProperty(n,"headerCase",{enumerable:!0,get:function(){return a.headerCase}}),Object.defineProperty(n,"noCase",{enumerable:!0,get:function(){return a.noCase}}),Object.defineProperty(n,"paramCase",{enumerable:!0,get:function(){return a.paramCase}}),Object.defineProperty(n,"pascalCase",{enumerable:!0,get:function(){return a.pascalCase}}),Object.defineProperty(n,"pathCase",{enumerable:!0,get:function(){return a.pathCase}}),Object.defineProperty(n,"sentenceCase",{enumerable:!0,get:function(){return a.sentenceCase}}),Object.defineProperty(n,"snakeCase",{enumerable:!0,get:function(){return a.snakeCase}});var s=t(93471);Object.defineProperty(n,"pluralize",{enumerable:!0,get:function(){return s.pluralize}}),Object.defineProperty(n,"singularize",{enumerable:!0,get:function(){return s.singularize}}),Object.defineProperty(n,"inflect",{enumerable:!0,get:function(){return s.inflect}}),Object.defineProperty(n,"camelize",{enumerable:!0,get:function(){return s.camelize}}),Object.defineProperty(n,"underscore",{enumerable:!0,get:function(){return s.underscore}}),Object.defineProperty(n,"humanize",{enumerable:!0,get:function(){return s.humanize}}),Object.defineProperty(n,"capitalize",{enumerable:!0,get:function(){return s.capitalize}}),Object.defineProperty(n,"dasherize",{enumerable:!0,get:function(){return s.dasherize}}),Object.defineProperty(n,"titleize",{enumerable:!0,get:function(){return s.titleize}}),Object.defineProperty(n,"demodulize",{enumerable:!0,get:function(){return s.demodulize}}),Object.defineProperty(n,"tableize",{enumerable:!0,get:function(){return s.tableize}}),Object.defineProperty(n,"classify",{enumerable:!0,get:function(){return s.classify}}),Object.defineProperty(n,"foreignKey",{enumerable:!0,get:function(){return s.foreignKey}}),Object.defineProperty(n,"ordinalize",{enumerable:!0,get:function(){return s.ordinalize}}),Object.defineProperty(n,"transform",{enumerable:!0,get:function(){return s.transform}})},35854:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>f,frontMatter:()=>p,metadata:()=>m,toc:()=>d});var a=t(58168),s=(t(96540),t(15680)),l=t(83167),r=t(641),o=t(11470),i=t(19365);const p={pagination_next:"main/create-new-template/settings",pagination_prev:"main/create-new-template/packages",sidebar_position:3},c="Dynamic Files",m={unversionedId:"main/create-new-template/dynamic-files",id:"main/create-new-template/dynamic-files",title:"Dynamic Files",description:"If you not using a version of templates above 1.1.0, please refer to the",source:"@site/docs/main/create-new-template/dynamic-files.mdx",sourceDirName:"main/create-new-template",slug:"/main/create-new-template/dynamic-files",permalink:"/templates/docs/main/create-new-template/dynamic-files",draft:!1,editUrl:"https://github.com/marcellino-ornelas/templates/tree/master/docs/docs/main/create-new-template/dynamic-files.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{pagination_next:"main/create-new-template/settings",pagination_prev:"main/create-new-template/packages",sidebar_position:3},sidebar:"docs",previous:{title:"Packages",permalink:"/templates/docs/main/create-new-template/packages"},next:{title:"Settings File",permalink:"/templates/docs/main/create-new-template/settings"}},u={},d=[{value:"Dynamic files",id:"dynamic-files-1",level:2},{value:"Template engine",id:"template-engine",level:2},{value:"Inline syntax",id:"inline-syntax",level:3},{value:"Block syntax",id:"block-syntax",level:3},{value:"Template Syntaxes",id:"template-syntaxes",level:2},{value:"Evaluation",id:"evaluation",level:3},{value:"Interpolation",id:"interpolation",level:3},{value:"Conditionals",id:"conditionals",level:3},{value:"Else",id:"else",level:4},{value:"Else if",id:"else-if",level:4},{value:"Loops",id:"loops",level:3},{value:"Defs (Partials)",id:"defs-partials",level:3},{value:"Args",id:"args",level:4},{value:"Functions",id:"functions",level:4},{value:"How to utilize the template engine",id:"how-to-utilize-the-template-engine",level:2},{value:"File contents",id:"file-contents",level:3},{value:"File names",id:"file-names",level:3},{value:"Def files",id:"def-files",level:3},{value:"single def file",id:"single-def-file",level:4},{value:"Multi def file",id:"multi-def-file",level:4},{value:"Templates Context",id:"templates-context",level:2},{value:"Name",id:"name",level:3},{value:"Answers",id:"answers",level:3},{value:"Utils",id:"utils",level:3}],g={toc:d},y="wrapper";function f(e){let{components:n,...t}=e;return(0,s.yg)(y,(0,a.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("h1",{id:"dynamic-files"},"Dynamic Files"),(0,s.yg)("admonition",{type:"caution"},(0,s.yg)("p",{parentName:"admonition"},"If you not using a version of templates above ",(0,s.yg)("inlineCode",{parentName:"p"},"1.1.0"),", please refer to the\n",(0,s.yg)("a",{parentName:"p",href:"./dynamic-files-legacy"},"legacy documentation"),".")),(0,s.yg)("h2",{id:"dynamic-files-1"},"Dynamic files"),(0,s.yg)("p",null,"Dynamic files are files that can be rendered with dynamic data, similar to how\ntemplate engines work. You use a special syntax that gets replaced with the data\nyou provide. This output is then saved into the file where the instance is being\ngenerated."),(0,s.yg)("p",null,"A dynamic file with these contents:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{= tps.answers.name }} wants some more cake\n")),(0,s.yg)("p",null,"will produce something like the following:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"lino wants some more cake\n")),(0,s.yg)("p",null,"Dont worry about the specifics, well touch more on the syntax later on this\npage."),(0,s.yg)("h2",{id:"template-engine"},"Template engine"),(0,s.yg)("p",null,"Our template engine was forked from the ",(0,s.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/dot"},"doT"),"\ntemplate engine. This provides great flexibility when creating your templates,\nalong with additional features we provide to help with whitespace control."),(0,s.yg)("admonition",{type:"tip"},(0,s.yg)("p",{parentName:"admonition"},"Keep in mind that all white space in the file will be preserved during render.\nAt times, you may find yourself adding extra whitespace to make your template\nmore readable. However, avoid doing this because the whitespace will remain in\nyour new instance."),(0,s.yg)("p",{parentName:"admonition"},"Use our ",(0,s.yg)("a",{parentName:"p",href:"/templates/playground"},"playground page")," to test dynamiclly files\nwithout having to generate them.")),(0,s.yg)("p",null,"Our template engine supports two main syntaxes: ",(0,s.yg)("inlineCode",{parentName:"p"},"inline")," and ",(0,s.yg)("inlineCode",{parentName:"p"},"block"),"."),(0,s.yg)("h3",{id:"inline-syntax"},"Inline syntax"),(0,s.yg)("p",null,"Inline syntax is implemented using double curly brackets at the start and end of\nyour expression ",(0,s.yg)("inlineCode",{parentName:"p"},"{{ ... }}"),". This syntax is more flexible and is recommended\nwhen dealing with different control flows inline."),(0,s.yg)("p",null,"Take this template that is using a inline interpolation statement to render the\nname of instance as this react components name."),(0,s.yg)(r.c,{tps:{name:"Nav"},lang:"typescript",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},"export const {{= tps.name }} = () => {\n    /* rest of react component code... */\n}\n"))),(0,s.yg)("admonition",{type:"info"},(0,s.yg)("p",{parentName:"admonition"},"We will be using references to the ",(0,s.yg)("a",{parentName:"p",href:"#templates-context"},"templates context"),"\nobject like ",(0,s.yg)("inlineCode",{parentName:"p"},"tps.name"),", ",(0,s.yg)("inlineCode",{parentName:"p"},"tps.answers.*"),", ",(0,s.yg)("inlineCode",{parentName:"p"},"tps.utils.*")," and others throughout\nthis document. However, we won't cover this object in detail until later in the\nguide. For now, keep in mind that ",(0,s.yg)("inlineCode",{parentName:"p"},"tps.name")," is the name of the instance you are\ngenerating, ",(0,s.yg)("inlineCode",{parentName:"p"},"utils")," is a collection of helper functions designed to make\ncreating dynamic templates easier, and ",(0,s.yg)("inlineCode",{parentName:"p"},"answers")," is an object that holds the\ninformation the user of your template passes to it.")),(0,s.yg)("h3",{id:"block-syntax"},"Block syntax"),(0,s.yg)("p",null,"Block syntax is implemented using three curly brackets at both the start and end\nof your expression ",(0,s.yg)("inlineCode",{parentName:"p"},"{{{ ... }}}"),". The main difference is that block syntax needs\nto be placed on a new line, and it will remove all whitespace in front of and\nbehind the brackets, completely removing the line from the output."),(0,s.yg)("p",null,"Take this example using a block if statement: when ",(0,s.yg)("inlineCode",{parentName:"p"},"css")," is ",(0,s.yg)("inlineCode",{parentName:"p"},"false")," notice how\nthere is no trace that anything was there before. No new lines, no spaces,\nnothing. It was completely wiped."),(0,s.yg)(r.c,{tps:{answers:{css:!1}},lang:"typescript",templateMeta:"{2-4}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},"import React from 'react';\n{{{? tps.answers.css }}}\nimport './component.css';\n{{{?}}}\n"))),(0,s.yg)("p",null,"Now when ",(0,s.yg)("inlineCode",{parentName:"p"},"css")," is ",(0,s.yg)("inlineCode",{parentName:"p"},"true")," notice how the only thing being rendered is whats\ninside the if statement."),(0,s.yg)(r.c,{tps:{answers:{css:!0}},lang:"typescript",displayTemplate:!1,mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},"import React from 'react';\n{{{? tps.answers.css }}}\nimport './component.css';\n{{{?}}}\n"))),(0,s.yg)("p",null,"You can also indent block syntax and all tabs and spaces will be removed."),(0,s.yg)(r.c,{tps:{answers:{css:!1}},lang:"typescript",templateMeta:"{2-4}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},"const App = () => {\n    {{{? tps.answers.state }}}\n    const [state, setState] = useState(null);\n    {{{?}}}\n\n    return (\n        /* other code ... */\n    );\n};\n"))),(0,s.yg)(l.R,{title:"Why is there inline and block?",mdxType:"Example"},(0,s.yg)("p",null,"Block syntax plays a special role in file generation. By removing all existence\nof white space, your rendered output looks nice and clean. Templates aims to not\nonly make development eaiser but also enforce standards and best practices."),(0,s.yg)("p",null,"Before block syntax, there was only inline syntax. However there was a lot of\nissues with the way these tags got parsed that left outputed files with\nunindented whitespace."),(0,s.yg)("p",null,(0,s.yg)("strong",{parentName:"p"},"example:")),(0,s.yg)("p",null,"Lets use the example template from above and change block syntax to inline\nsyntax. Now when ",(0,s.yg)("inlineCode",{parentName:"p"},"css")," & ",(0,s.yg)("inlineCode",{parentName:"p"},"state")," are ",(0,s.yg)("inlineCode",{parentName:"p"},"false"),", notice how there is extra\nwhitespace behind."),(0,s.yg)(r.c,{tps:{answers:{css:!1,state:!1}},lang:"typescript",templateMeta:"{2-4,7-9}",resultMeta:"{2,5}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},"import React from 'react';\n{{? tps.answers.css }}\nimport './component.css';\n{{?}}\n\nconst App = () => {\n    {{? tps.answers.state }}\n    const [state, setState] = useState(null);\n    {{?}}\n\n    return (\n        /* other code ... */\n    );\n};\n"))),(0,s.yg)("p",null,"Now when ",(0,s.yg)("inlineCode",{parentName:"p"},"css")," & ",(0,s.yg)("inlineCode",{parentName:"p"},"state")," are ",(0,s.yg)("inlineCode",{parentName:"p"},"true"),", you can also see extra lines."),(0,s.yg)(r.c,{tps:{answers:{css:!0,state:!0}},lang:"typescript",resultMeta:"{2,4,7,9}",displayTemplate:!1,mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},"import React from 'react';\n{{? tps.answers.css }}\nimport './component.css';\n{{?}}\n\nconst App = () => {\n    {{? tps.answers.state }}\n    const [state, setState] = useState(null);\n    {{?}}\n\n    return (\n        /* other code ... */\n    );\n};\n"))),(0,s.yg)("p",null,"In order to get the perfect output, you needed to sacrafice the readability of\nthe template and do something like the following:"),(0,s.yg)(r.c,{tps:{answers:{css:!1,state:!1}},lang:"typescript",templateMeta:"{2-3,5-6}",resultMeta:"{2,4}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},"import React from 'react';\n{{? tps.answers.css }}import './component.css';\n{{?}}\nconst App = () => {\n    {{? tps.answers.state }}const [state, setState] = useState(null);\n    {{?}}\n    return (\n        /* other code ... */\n    );\n};\n"))),(0,s.yg)("p",null,"Now when ",(0,s.yg)("inlineCode",{parentName:"p"},"css")," & ",(0,s.yg)("inlineCode",{parentName:"p"},"state")," are ",(0,s.yg)("inlineCode",{parentName:"p"},"true"),", you can also see extra lines."),(0,s.yg)(r.c,{tps:{answers:{css:!0,state:!0}},lang:"typescript",displayTemplate:!1,resultMeta:"{3,6}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},"import React from 'react';\n{{? tps.answers.css }}import './component.css';\n{{?}}\nconst App = () => {\n    {{? tps.answers.state }}const [state, setState] = useState(null);\n    {{?}}\n    return (\n        /* other code ... */\n    );\n};\n"))),(0,s.yg)("p",null,"While this might not look the worst for one answer, imagine 3 or 4. Now lets see\nhow block syntax improves this:"),(0,s.yg)(r.c,{tps:{answers:{css:!1,state:!1}},lang:"typescript",templateMeta:"{2-4,7-9}",resultMeta:"{2,4}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},"import React from 'react';\n{{{? tps.answers.css }}}\nimport './component.css';\n{{{?}}}\n\nconst App = () => {\n    {{{? tps.answers.state }}}\n    const [state, setState] = useState(null);\n    {{{?}}}\n\n    return (\n        /* other code ... */\n    );\n};\n"))),(0,s.yg)("p",null,"Now when ",(0,s.yg)("inlineCode",{parentName:"p"},"css")," & ",(0,s.yg)("inlineCode",{parentName:"p"},"state")," are ",(0,s.yg)("inlineCode",{parentName:"p"},"true"),","),(0,s.yg)(r.c,{tps:{answers:{css:!0,state:!0}},lang:"typescript",displayTemplate:!1,resultMeta:"{3,6}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},"import React from 'react';\n{{{? tps.answers.css }}}\nimport './component.css';\n{{{?}}}\n\nconst App = () => {\n    {{{? tps.answers.state }}}\n    const [state, setState] = useState(null);\n    {{{?}}}\n\n    return (\n        /* other code ... */\n    );\n};\n")))),(0,s.yg)("h2",{id:"template-syntaxes"},"Template Syntaxes"),(0,s.yg)("h3",{id:"evaluation"},"Evaluation"),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"block",label:"Block",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{{\n    <expressions...>\n}}}\n"))),(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{ <expressions...> }}\n")))),(0,s.yg)("p",null,"Evaluation are achieved by using inline or block brackets. This allows you to\nwrite any arbitrary JavaScript expressions. You can create variables, functions,\nconditions, the possibilities are endless. This can be helpful for simplifying\nmore complex expressions. ",(0,s.yg)("strong",{parentName:"p"},"The semi-colon at the end of each expression is\nmandatory!")),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"block",label:"Block",mdxType:"TabItem"},(0,s.yg)(r.c,{templateMeta:"{1-5}",lang:"ts",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},'{{{\n    const name = "Marcellino Ornelas";\n    const age = 21;\n    const ageCategory = age > 18 ? "Adult" : "Child";\n}}}\n/* rest of code... */\n')))),(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)("admonition",{type:"caution"},(0,s.yg)("p",{parentName:"admonition"},"Inline evaluations are not recommend due to the white space they leave behind.\nHowever we still support this syntax due to legacy reasons but may be removed in\nfuture versions.")),(0,s.yg)(r.c,{templateMeta:"{1}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},'{{ const name = "Marcellino Ornelas"; }}\n{{= name }}\n'))))),(0,s.yg)("p",null,"Checkout our ",(0,s.yg)("a",{parentName:"p",href:"../../api/template-engine/evaluation"},"API docs")," for more examples\non how you can take advantage of evaluations."),(0,s.yg)("h3",{id:"interpolation"},"Interpolation"),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{= <expression> }}\n")))),(0,s.yg)("p",null,"Interpolation is achieved using the equal sign operator ",(0,s.yg)("inlineCode",{parentName:"p"},"=")," along with inline\nbrackets. This operator allows you to render dynamic output into the files\ncontents."),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)("p",null,"Take this template that is using a inline interpolation statement to render the\nname of instance as this react components name."),(0,s.yg)(r.c,{tps:{name:"Nav"},lang:"typescript",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},"export const {{= tps.name }} = () => {\n    /* rest of react component code... */\n}\n"))))),(0,s.yg)("p",null,"Checkout our ",(0,s.yg)("a",{parentName:"p",href:"../../api/template-engine/interpolation"},"API docs")," for more\nexamples on how you can take advantage of interpolations."),(0,s.yg)("h3",{id:"conditionals"},"Conditionals"),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"block",label:"Block",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{{? <condition> }}}\nif output\n{{{?? <else-if-condition> }}}\nelse if output\n{{{??}}}\nelse output\n{{{?}}}\n"))),(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{? <condition> }}if output{{?? <else-if-condition> }}else if output{{??}}else output{{?}}\n")))),(0,s.yg)("p",null,"Conditionals are achieved using the question mark operator ",(0,s.yg)("inlineCode",{parentName:"p"},"?"),", along with\ninline or block brackets. The result of the provided expression will be rendered\ninto the output of the file when the expression returns a truthy value."),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"block",label:"Block",mdxType:"TabItem"},(0,s.yg)("p",null,"Take this template below that is using a block if statement to conditionally\nrender an css import when the ",(0,s.yg)("inlineCode",{parentName:"p"},"css")," answer is ",(0,s.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,s.yg)(r.c,{tps:{name:"react-component",answers:{css:!0}},lang:"typescript",templateMeta:"{2-4}",resultMeta:"{2}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"import React from 'react';\n{{{? tps.answers.css }}}\nimport \"styles.css\";\n{{{?}}}\n"))),(0,s.yg)("p",null,"Now when ",(0,s.yg)("inlineCode",{parentName:"p"},"css")," is ",(0,s.yg)("inlineCode",{parentName:"p"},"false"),", no output will be displayed."),(0,s.yg)(r.c,{tps:{name:"react-component",answers:{css:!1}},lang:"typescript",displayTemplate:!1,mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"import React from 'react';\n{{{? tps.answers.css }}}\nimport \"styles.css\";\n{{{?}}}\n")))),(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)("p",null,"Take this template that is using a inline if statement to conditionally render a\ntypescript type to the variable when the ",(0,s.yg)("inlineCode",{parentName:"p"},"typescript")," answer is ",(0,s.yg)("inlineCode",{parentName:"p"},"true"),"."),(0,s.yg)(r.c,{lang:"typescript",tps:{name:"react-component",answers:{typescript:!0}},mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"const name{{? tps.answers.typescript }}: string{{?}} = 'lino';\n"))),(0,s.yg)("p",null,"Now when ",(0,s.yg)("inlineCode",{parentName:"p"},"typescript")," is ",(0,s.yg)("inlineCode",{parentName:"p"},"false"),", no typescript typings will be added."),(0,s.yg)(r.c,{tps:{name:"react-component",answers:{typescript:!1}},lang:"typescript",displayTemplate:!1,mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"const name{{? tps.answers.typescript }}: string{{?}} = 'lino';\n"))))),(0,s.yg)("h4",{id:"else"},"Else"),(0,s.yg)("p",null,"You can also write else statements by adding an additional inline or block\nbrackets that contains two question mark operators ",(0,s.yg)("inlineCode",{parentName:"p"},"??"),"."),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"block",label:"Block",mdxType:"TabItem"},(0,s.yg)("p",null,"Take this template that is using a block if-else statement to conditionally\nrender a import statement. If ",(0,s.yg)("inlineCode",{parentName:"p"},"cssLang")," is ",(0,s.yg)("inlineCode",{parentName:"p"},"modules"),", it will render an import\nstatement for CSS modules; otherwise, it will render a normal CSS import\nstatement."),(0,s.yg)(r.c,{lang:"typescript",tps:{name:"footer",answers:{cssLang:"modules"}},templateMeta:"{4-5}",resultMeta:"{2}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"import React from 'react';\n{{{? tps.answers.cssLang === 'modules'}}}\nimport styles from './{{= tps.name}}.css';\n{{{??}}}\nimport './{{= tps.name}}.css';\n{{{?}}}\n"))),(0,s.yg)("p",null,"Now when ",(0,s.yg)("inlineCode",{parentName:"p"},"cssLang")," is ",(0,s.yg)("strong",{parentName:"p"},"not")," ",(0,s.yg)("inlineCode",{parentName:"p"},"modules"),", we will get a normal CSS import\nstatement."),(0,s.yg)(r.c,{lang:"typescript",tps:{name:"footer",answers:{cssLang:"less"}},displayTemplate:!1,resultMeta:"{2}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"import React from 'react';\n{{{? tps.answers.cssLang === 'modules'}}}\nimport styles from './{{= tps.name}}.css';\n{{{??}}}\nimport './{{= tps.name}}.css';\n{{{?}}}\n")))),(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)("p",null,"Take this template that is using a inline if-else statement to conditionally\nrender a component name. If ",(0,s.yg)("inlineCode",{parentName:"p"},"component")," is set to a value, it will use the value\nof ",(0,s.yg)("inlineCode",{parentName:"p"},"component")," as the component name; otherwise, it will render a ",(0,s.yg)("inlineCode",{parentName:"p"},"div"),"."),(0,s.yg)(r.c,{tps:{name:"react-component",answers:{component:"Page"}},lang:"tsx",templateMeta:"{3,5}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"const App = () => {\n    return (\n        <{{? tps.answers.component }}{{= tps.answers.component }}{{??}}div{{?}}>\n            /* contents... */\n        </{{? tps.answers.component }}{{= tps.answers.component }}{{??}}div{{?}}>\n    );\n};\n"))),(0,s.yg)("p",null,"Now when ",(0,s.yg)("inlineCode",{parentName:"p"},"component")," is not set to a value, we will get a ",(0,s.yg)("inlineCode",{parentName:"p"},"div"),"."),(0,s.yg)(r.c,{tps:{name:"react-component",answers:{}},lang:"tsx",templateMeta:"{3,5}",displayTemplate:!1,mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"const App = () => {\n    return (\n        <{{? tps.answers.component }}{{= tps.answers.component }}{{??}}div{{?}}>\n            /* contents... */\n        </{{? tps.answers.component }}{{= tps.answers.component }}{{??}}div{{?}}>\n    );\n};\n"))))),(0,s.yg)("h4",{id:"else-if"},"Else if"),(0,s.yg)("p",null,"You can also write else-if statements by adding an additional inline or block\nbrackets that contains the two question mark operators ",(0,s.yg)("inlineCode",{parentName:"p"},"??")," with a expression\nafterwards."),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"block",label:"Block",mdxType:"TabItem"},(0,s.yg)("p",null,"Take this template that is using a block else-if statement to conditonally\nrender a import statement. If ",(0,s.yg)("inlineCode",{parentName:"p"},"cssLang")," is ",(0,s.yg)("inlineCode",{parentName:"p"},"modules"),", it will render an import\nstatement for CSS modules. Else if ",(0,s.yg)("inlineCode",{parentName:"p"},"css")," is ",(0,s.yg)("inlineCode",{parentName:"p"},"true"),", it will render a CSS import\nstatement. Otherwise it will render nothing."),(0,s.yg)(r.c,{lang:"typescript",tps:{name:"footer",answers:{cssLang:"modules",css:!0}},templateMeta:"{4-5}",resultMeta:"{2}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"import React from 'react';\n{{{? tps.answers.cssLang === 'modules'}}}\nimport styles from './{{= tps.name}}.css';\n{{{?? tps.answers.css }}}\nimport './{{= tps.name}}.css';\n{{{?}}}\n"))),(0,s.yg)("p",null,"Now when ",(0,s.yg)("inlineCode",{parentName:"p"},"cssLang")," is not ",(0,s.yg)("inlineCode",{parentName:"p"},"modules")," and ",(0,s.yg)("inlineCode",{parentName:"p"},"css")," is ",(0,s.yg)("inlineCode",{parentName:"p"},"true"),", you will get a normal\ncss import statement."),(0,s.yg)(r.c,{lang:"typescript",tps:{name:"footer",answers:{cssLang:"other",css:!0}},templateMeta:"{4-5}",displayTemplate:!1,resultMeta:"{2}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"import React from 'react';\n{{{? tps.answers.cssLang === 'modules'}}}\nimport styles from './{{= tps.name}}.css';\n{{{?? tps.answers.css }}}\nimport './{{= tps.name}}.css';\n{{{?}}}\n"))),(0,s.yg)("p",null,"Lastly when ",(0,s.yg)("inlineCode",{parentName:"p"},"cssLang")," is not ",(0,s.yg)("inlineCode",{parentName:"p"},"modules")," and ",(0,s.yg)("inlineCode",{parentName:"p"},"css")," is ",(0,s.yg)("inlineCode",{parentName:"p"},"false"),", you will get no\nrendered output."),(0,s.yg)(r.c,{lang:"typescript",tps:{name:"footer",answers:{cssLang:"other",css:!1}},templateMeta:"{4-5}",displayTemplate:!1,mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"import React from 'react';\n{{{? tps.answers.cssLang === 'modules'}}}\nimport styles from './{{= tps.name}}.css';\n{{{?? tps.answers.css }}}\nimport from './{{= tps.name}}.css';\n{{{?}}}\n")))),(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)("p",null,"Take this template that is using a inline else-if statement to conditonally\nrender a component name. If ",(0,s.yg)("inlineCode",{parentName:"p"},"component")," is ",(0,s.yg)("inlineCode",{parentName:"p"},"page"),", it will render the\n",(0,s.yg)("inlineCode",{parentName:"p"},"PageComponent")," with a ",(0,s.yg)("inlineCode",{parentName:"p"},"block")," prop. Else if ",(0,s.yg)("inlineCode",{parentName:"p"},"component")," is set to a value, it\nwill render the value as the component name. Otherwise, it will render a ",(0,s.yg)("inlineCode",{parentName:"p"},"div"),"."),(0,s.yg)(r.c,{tps:{name:"react-component",answers:{component:"page"}},lang:"tsx",templateMeta:"{3}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"const App = () => {\n    return (\n        <{{? tps.answers.component === 'page' }}PageComponent block{{?? tps.answers.component }}{{= tps.answers.component }}{{??}}div{{?}}>\n            /* contents... */\n        </{{? tps.answers.component === 'page' }}PageComponent{{?? tps.answers.component }}{{= tps.answers.component }}{{??}}div{{?}}>\n    );\n};\n"))),(0,s.yg)("p",null,"Now when the ",(0,s.yg)("inlineCode",{parentName:"p"},"component")," answer is not ",(0,s.yg)("inlineCode",{parentName:"p"},"page"),", it will use whatever the user\npassed into it. In this case we passed in ",(0,s.yg)("inlineCode",{parentName:"p"},"Box"),"."),(0,s.yg)(r.c,{tps:{name:"react-component",answers:{component:"Box"}},lang:"tsx",templateMeta:"{3}",displayTemplate:!1,mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"const App = () => {\n    return (\n        <{{? tps.answers.component === 'page' }}PageComponent block{{?? tps.answers.component }}{{= tps.answers.component }}{{??}}div{{?}}>\n            /* contents... */\n        </{{? tps.answers.component === 'page' }}PageComponent{{?? tps.answers.component }}{{= tps.answers.component }}{{??}}div{{?}}>\n    );\n};\n"))),(0,s.yg)("p",null,"Lastly, if no answer was given for ",(0,s.yg)("inlineCode",{parentName:"p"},"component"),", we will get a ",(0,s.yg)("inlineCode",{parentName:"p"},"div"),"."),(0,s.yg)(r.c,{tps:{name:"react-component"},lang:"tsx",templateMeta:"{3}",displayTemplate:!1,mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"const App = () => {\n    return (\n        <{{? tps.answers.component === 'page' }}PageComponent block{{?? tps.answers.component }}{{= tps.answers.component }}{{??}}div{{?}}>\n            /* contents... */\n        </{{? tps.answers.component === 'page' }}PageComponent{{?? tps.answers.component }}{{= tps.answers.component }}{{??}}div{{?}}>\n    );\n};\n"))))),(0,s.yg)("p",null,"Checkout our ",(0,s.yg)("a",{parentName:"p",href:"../../api/template-engine/conditionals"},"API docs")," for more\nexamples on how you can take advantage of conditionals."),(0,s.yg)("h3",{id:"loops"},"Loops"),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"block",label:"Block",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{{~<array> :<value>:<index>}}}\nloop output\n{{{~}}}\n"))),(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{~<array> :<value>:<index>}}loop output{{~}}\n")))),(0,s.yg)("p",null,"Loops are achieved using the ",(0,s.yg)("inlineCode",{parentName:"p"},"~")," operator along with inline or block brackets.\nThe contents of the loop will be rendered into the output of the file for each\nitem in the array."),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"block",label:"Block",mdxType:"TabItem"},(0,s.yg)("p",null,"Take this template using a block loop statement to render import statements to\nthe react file when ",(0,s.yg)("inlineCode",{parentName:"p"},"modules")," is specified."),(0,s.yg)(r.c,{tps:{answers:{modules:["utils","pages"]}},lang:"tsx",templateMeta:"{2-4}",resultMeta:"{2-3}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"import React from 'react';\n{{{~tps.answers.modules :value}}}\nimport {{= value}} from \"@app/{{= value}}\";\n{{{~}}}\n")))),(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)("p",null,"Take this template using a inline loop statement to render props to the react\ncomponent when ",(0,s.yg)("inlineCode",{parentName:"p"},"props")," are passed."),(0,s.yg)(r.c,{tps:{answers:{props:["name","onClick"]}},lang:"tsx",templateMeta:"{4}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},'{{{\n    const propsLastIndex = tps.answers.props.length - 1;\n}}}\nconst App = ({ {{~tps.answers.props :value:index}}{{= value + (index !== propsLastIndex ? ", " : "") }}{{~}} }) => {\n    return (\n        /* react code .... */\n    );\n};\n'))),(0,s.yg)("admonition",{type:"tip"},(0,s.yg)("p",{parentName:"admonition"},"If you dont need anything to complex, then use ",(0,s.yg)("inlineCode",{parentName:"p"},"join"),"!"),(0,s.yg)(r.c,{tps:{answers:{props:["name","onClick"]}},lang:"tsx",mdxType:"Dot"},(0,s.yg)("pre",{parentName:"admonition"},(0,s.yg)("code",{parentName:"pre",className:"language-text"},'const App = ({ {{= tps.answers.props.join(", ")}} }) => {\n    return (\n        /* react code .... */\n    );\n};\n')))))),(0,s.yg)("p",null,"Checkout our ",(0,s.yg)("a",{parentName:"p",href:"../../api/template-engine/loops"},"API docs")," for more examples on\nhow you can take advantage of loops."),(0,s.yg)("h3",{id:"defs-partials"},"Defs (Partials)"),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"block",label:"Block",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{{##def.<name>:<arg>:\ndef contents\n#}}}\n"))),(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{##def.<name>:<arg>:def contents#}}\n")))),(0,s.yg)("p",null,"Defs, or partials, are achieved using ",(0,s.yg)("inlineCode",{parentName:"p"},"##def")," at the beginning and ",(0,s.yg)("inlineCode",{parentName:"p"},"#")," at the\nend of inline or block brackets. Defs allow you to create reusable sections of a\ntemplate. Think of them as smaller templates that can be defined separately and\nthen included within larger templates. This provides modularity and simplifies\nthe process of maintaining and updating your templates."),(0,s.yg)("p",null,"To render the contents of the def, use ",(0,s.yg)("inlineCode",{parentName:"p"},"#def")," along with inline brackets."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{#def.<name>:<arg>}}\n")),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"block",label:"Block",mdxType:"TabItem"},(0,s.yg)("p",null,"Take this template thats creating a ",(0,s.yg)("inlineCode",{parentName:"p"},"complexExpression")," def that will render a\ncomplex expression in both layout options ",(0,s.yg)("inlineCode",{parentName:"p"},"one")," & ",(0,s.yg)("inlineCode",{parentName:"p"},"two")," but not in any others.\nUtilizing a def for this allows you to maintain one version of the logic without\nduplicating it in your template."),(0,s.yg)(r.c,{tps:{answers:{layout:"one"}},lang:"tsx",templateMeta:"{1-3,7,11}",resultMeta:"{3}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{{##def.complexExpression:\nconst someComplexExpression = /* some complex expression */;\n#}}}\n{{{? tps.answers.layout === \"one\"}}}\n/* layout one code... */\n\n{{#def.complexExpression}}\n{{{?? tps.answers.layout === 'two'}}}\n/* layout two code... */\n\n{{#def.complexExpression}}\n{{{??}}}\n/* default layout code... */\n{{{?}}}\n")))),(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)(r.c,{mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{##def.intro:This is my intro#}}\n{{#def.intro}}\n"))),(0,s.yg)("admonition",{type:"caution"},(0,s.yg)("p",{parentName:"admonition"},"Inline defs are not recommend due to the white space they leave behind. However,\nwe still support this syntax for legacy reasons, though it may be removed in\nfuture versions. You can achieve the same result with a block def:"),(0,s.yg)(r.c,{mdxType:"Dot"},(0,s.yg)("pre",{parentName:"admonition"},(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{{##def.intro:\nThis is my intro\n#}}}\n{{#def.intro}}\n")))))),(0,s.yg)("h4",{id:"args"},"Args"),(0,s.yg)("p",null,"You can also pass one argument to a def. This argument can be any valid\njavascript value."),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"block",label:"Block",mdxType:"TabItem"},(0,s.yg)(r.c,{lang:"tsx",templateMeta:"{1,4}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{{##def.complexExpression:useTypescript:\nconst someComplexExpression{{? useTypescript ?? false }}: string{{?}} = /* some complex expression */;\n#}}}\n{{#def.complexExpression:true}}\n")))),(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)(r.c,{mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},'{{##def.intro:name:My name is {{= name}}#}}\n{{#def.intro:"lino"}}\n'))),(0,s.yg)("admonition",{type:"caution"},(0,s.yg)("p",{parentName:"admonition"},"Inline defs are not recommend due to the white space they leave behind. However,\nwe still support this syntax for legacy reasons, though it may be removed in\nfuture versions. You can achieve the same result with a block def:"),(0,s.yg)(r.c,{mdxType:"Dot"},(0,s.yg)("pre",{parentName:"admonition"},(0,s.yg)("code",{parentName:"pre",className:"language-text"},'{{{##def.intro:name:\nMy name is {{= name}}\n#}}}\n{{#def.intro:"lino"}}\n')))))),(0,s.yg)("p",null,"If you need to pass more information to the def, you can pass an object as the\nargument and add all the information to the object. Keep in mind that if you\npass an object directly, you need to follow it with a semicolon ",(0,s.yg)("inlineCode",{parentName:"p"},";")," or a space."),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"block",label:"Block",mdxType:"TabItem"},(0,s.yg)(r.c,{lang:"tsx",templateMeta:"{5}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},'{{{##def.someExpression:user:\nconst name = "{{= user.name}}";\nconst age = {{= user.age}};\n#}}}\n{{#def.someExpression:{ name: "lino", age: 24 }; }}\n')))),(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)(r.c,{mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},'{{##def.someExpression:user:My name is {{= user.name}} and my age is {{= user.age}}#}}\n{{#def.someExpression:{ name: "lino", age: 24 }; }}\n'))),(0,s.yg)("admonition",{type:"caution"},(0,s.yg)("p",{parentName:"admonition"},"Inline defs are not recommend due to the white space they leave behind. However,\nwe still support this syntax for legacy reasons, though it may be removed in\nfuture versions. You can achieve the same result with a block def:"),(0,s.yg)(r.c,{mdxType:"Dot"},(0,s.yg)("pre",{parentName:"admonition"},(0,s.yg)("code",{parentName:"pre",className:"language-text"},'{{{##def.intro:user:\nMy name is {{= user.name}} and my age is {{= user.age}}\n#}}}\n{{#def.intro:{ name: "lino", age: 24 }; }}\n')))))),(0,s.yg)("h4",{id:"functions"},"Functions"),(0,s.yg)("p",null,"You can also define defs as an javascript function."),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"block",label:"Block",mdxType:"TabItem"},(0,s.yg)(r.c,{templateMeta:"{1-3}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},'{{{##def.renderIntro = function(name) {\n        return `My name is ${name}`;\n}#}}}\n{{#def.renderIntro("lino")}}\n')))),(0,s.yg)(i.A,{value:"inline",label:"Inline",mdxType:"TabItem"},(0,s.yg)(r.c,{templateMeta:"{1-3}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},'{{##def.renderIntro = function(name) {\n        return `My name is ${name}`;\n}#}}\n{{#def.renderIntro("lino")}}\n'))),(0,s.yg)("admonition",{type:"caution"},(0,s.yg)("p",{parentName:"admonition"},"Inline defs are not recommend due to the white space they leave behind. However,\nwe still support this syntax for legacy reasons, though it may be removed in\nfuture versions. You can achieve the same result with a block def:"),(0,s.yg)(r.c,{mdxType:"Dot"},(0,s.yg)("pre",{parentName:"admonition"},(0,s.yg)("code",{parentName:"pre",className:"language-text"},'{{{##def.renderIntro = function(name) {\n        return `My name is ${name}`;\n}#}}}\n{{#def.renderIntro("lino") }}\n')))))),(0,s.yg)("hr",null),(0,s.yg)("h2",{id:"how-to-utilize-the-template-engine"},"How to utilize the template engine"),(0,s.yg)("p",null,"There are three main ways to use our template engine to make your template\ndynamic, in ",(0,s.yg)("a",{parentName:"p",href:"#file-contents"},"file contents"),", ",(0,s.yg)("a",{parentName:"p",href:"#file-names"},"files names"),", and\n",(0,s.yg)("a",{parentName:"p",href:"#def-files"},"def files"),"."),(0,s.yg)("h3",{id:"file-contents"},"File contents"),(0,s.yg)("p",null,"To use our template engine in files, you must add a ",(0,s.yg)("inlineCode",{parentName:"p"},".tps")," extension to the end\nof your file name. When a new instance is rendered, this extension will be\nremoved, leaving any other extension that was before the ",(0,s.yg)("inlineCode",{parentName:"p"},".tps")," extension\nintact."),(0,s.yg)(r.c,{lang:"js",templateName:"server.js.tps",resultName:"server.js",tps:{answers:{security:!0}},mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},'const express = require("express");\n{{{? tps.answers.security }}}\nconst helmet = require("helmet");\n{{{?}}}\n\nconst app = express();\n\n{{{? tps.answers.security }}}\napp.use(helmet());\n\n{{{?}}}\n/* node code ... */\n'))),(0,s.yg)("h3",{id:"file-names"},"File names"),(0,s.yg)("p",null,"Every file within your template can utilize the template engine's capabilities\ndirectly in its file name. This allows for dynamic naming of files when creating\na new instances."),(0,s.yg)("p",null,"Take this template named ",(0,s.yg)("inlineCode",{parentName:"p"},"react-component"),", which includes a file named\n",(0,s.yg)("inlineCode",{parentName:"p"},"{{=tps.name}}.js"),":"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"| - .tps/\n    | - react-component\n        | - default\n            | - {{=tps.name}}.js\n")),(0,s.yg)("p",null,"Now if you rendered a new instance of this template named ",(0,s.yg)("inlineCode",{parentName:"p"},"Nav"),":"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash"},"tps react-component Nav\n")),(0,s.yg)("p",null,"then you'll end up with:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"| - Nav/\n    | - Nav.js\n")),(0,s.yg)("p",null,"Any functionality of our template engine can be used in files names, however\nhere are some common use cases that we use when we build templates."),(0,s.yg)(o.A,{mdxType:"Tabs"},(0,s.yg)(i.A,{value:"interpolation",label:"Interpolation",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{= tps.name}}.js\n")),(0,s.yg)("p",null,"If ",(0,s.yg)("inlineCode",{parentName:"p"},"name")," was ",(0,s.yg)("inlineCode",{parentName:"p"},"Nav")," then the result would be:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"Nav.js\n"))),(0,s.yg)(i.A,{value:"utils",label:"utils",mdxType:"TabItem"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{= tps.utils.camelCase(tps.name)}}.js\n")),(0,s.yg)("p",null,"If ",(0,s.yg)("inlineCode",{parentName:"p"},"name")," was ",(0,s.yg)("inlineCode",{parentName:"p"},"my-nav")," then the result would be:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"myNav.js\n")))),(0,s.yg)("h3",{id:"def-files"},"Def files"),(0,s.yg)("p",null,"Templates allow you to define defs inside files for easier use. Def files gets\nloaded before any files are rendered so you have access to all defs you define\ninside your template files. Any file with a ",(0,s.yg)("inlineCode",{parentName:"p"},".def")," extension in any of your\npackages is considered a def file."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"| - .tps/\n    | - react-component\n        | - default/\n            // highlight-next-line\n            | - helpers.def\n            | - some-other-file.js\n")),(0,s.yg)("p",null,"If you want your def files to be accessible everywhere, put them inside your\n",(0,s.yg)("inlineCode",{parentName:"p"},"default")," package. If your def file is only used inside a specific package then\nplace it inside that package."),(0,s.yg)("admonition",{type:"caution"},(0,s.yg)("p",{parentName:"admonition"},"Def files placed inside packages may be usable inside template files inside\nother packages, however this is discouraged and may not be supported in other\nversions.")),(0,s.yg)("p",null,"Def files can be used in two ways:"),(0,s.yg)("h4",{id:"single-def-file"},"single def file"),(0,s.yg)("p",null,"Single def files will use the entire file contents as the def contents. The name\nof this def will be the filename. You can access this def inside your template\nfiles by using ",(0,s.yg)("inlineCode",{parentName:"p"},"{{#def.<file-name>}}"),"."),(0,s.yg)("p",null,"Take this ",(0,s.yg)("inlineCode",{parentName:"p"},"react-component")," template that has a ",(0,s.yg)("inlineCode",{parentName:"p"},"imports.def")," def file and\n",(0,s.yg)("inlineCode",{parentName:"p"},"{{=tps.name}}.jsx.tps")," file."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"| - .tps/\n    | - react-component/\n        | - default/\n            | - imports.def\n            | - {{=tps.name}}.jsx.tps\n")),(0,s.yg)("p",null,"Inside the ",(0,s.yg)("inlineCode",{parentName:"p"},"imports.def"),", we have all the imports statements you will need for\nyour react components."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport '{{= tps.name}}.css';\n")),(0,s.yg)("p",null,"Now inside ",(0,s.yg)("inlineCode",{parentName:"p"},"{{=tps.name}}.jsx.tps")," we can use this def by the file name."),(0,s.yg)(r.c,{defs:{imports:"import React from 'react';\nimport '{{= tps.name}}.css';"},mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-tsx"},"{{#def.imports}}\n\nexport const {{=tps.name}} = () => {\n    /* react component stuff ... */\n};\n"))),(0,s.yg)("h4",{id:"multi-def-file"},"Multi def file"),(0,s.yg)("p",null,"Multi def file is a def file that contains multiple defs. Multi def files uses\nthe ",(0,s.yg)("a",{parentName:"p",href:"#defs-partials"},"defs syntax")," in order define more than one."),(0,s.yg)("p",null,"Take this ",(0,s.yg)("inlineCode",{parentName:"p"},"react-component")," template that has a ",(0,s.yg)("inlineCode",{parentName:"p"},"helper.def")," def file and\n",(0,s.yg)("inlineCode",{parentName:"p"},"{{=tps.name}}.jsx.tps")," file."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"| - .tps/\n    | - react-component/\n        | - default/\n            | - helper.def\n            | - {{=tps.name}}.jsx.tps\n")),(0,s.yg)("p",null,"Inside the ",(0,s.yg)("inlineCode",{parentName:"p"},"helpers.def"),", we have all the imports statements you will need for\nyour react components and the props interface for when typescript is used."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-tsx"},"{{{##def.imports:\nimport React from 'react';\nimport '{{= tps.name}}.css';\n#}}}\n\n{{{##def.propInterface:\ninterface Props {\n    /* props */\n}\n#}}}\n")),(0,s.yg)("p",null,"Now inside ",(0,s.yg)("inlineCode",{parentName:"p"},"{{=tps.name}}.jsx.tps")," we can use these defs."),(0,s.yg)(r.c,{lang:"tsx",tps:{answers:{typescript:!0}},defs:{imports:"import React from 'react';\nimport '{{= tps.name}}.css';",propsInterface:"interface Props {\n    /* props */\n}"},mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{#def.imports}}\n\n{{{? tps.answers.typescript}}}\n{{#def.propsInterface}}\n\n{{{?}}}\nexport const {{=tps.name}} = () => {\n    /* react component stuff ... */\n};\n"))),(0,s.yg)("h2",{id:"templates-context"},"Templates Context"),(0,s.yg)("p",null,"After converting a file to a dynamic file, you gain access to the template's\ncontext object. This object contains information about the template and\nrendering metadata. The context object can be referenced in any of our template\nsyntaxes."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{ tps }}\n")),(0,s.yg)("p",null,"We'll go over the most common properties of this object. For a full list, you\ncan refer to the ",(0,s.yg)("a",{parentName:"p",href:"../../api/template-context"},"tps context API"),"."),(0,s.yg)("h3",{id:"name"},"Name"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{= tps.name }}\n")),(0,s.yg)("p",null,"Name of new instance you are rendering. When rendering two or more instances at\nthe same time. The same concept as above apply's but for each path you pass in."),(0,s.yg)("p",null,"If you generate a new instance of a template with no build path. Then ",(0,s.yg)("inlineCode",{parentName:"p"},"tps.name"),"\nwill be null."),(0,s.yg)(l.R,{mdxType:"Example"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="cli"',title:'"cli"'},"tps react-component Nav\n")),(0,s.yg)(r.c,{tps:{name:"Nav"},lang:"tsx",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"// highlight-next-line\nconst {{= tps.name}} = (props) => {\n    return (\n        <div></div>\n    )\n}\n")))),(0,s.yg)("admonition",{type:"tip"},(0,s.yg)("p",{parentName:"admonition"},"Dont remember what the template name is? Refresh your mind\n",(0,s.yg)("a",{parentName:"p",href:"./templates#single-build-path"},"here"),".")),(0,s.yg)("hr",null),(0,s.yg)("h3",{id:"answers"},"Answers"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{= tps.answers.<prompt-name> }}\n")),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"tps.answers")," is an object that holds the responses your user provided for your\nprompts. ",(0,s.yg)("a",{parentName:"p",href:"./prompts"},"Prompts")," are a way for template owners to ask users for\nadditional information about how they want their template created. However\n",(0,s.yg)("a",{parentName:"p",href:"./prompts"},"prompts")," aren't covered until a bit later in this guide."),(0,s.yg)(l.R,{mdxType:"Example"},(0,s.yg)("p",null,"when a user creates a new instance of a template:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"tps react-component Nav\n")),(0,s.yg)("p",null,'They will prompted a list of questions. In this case if they "want to use a css\nfile". Template owners can now use the answers object to get the value the user\nanswered.'),(0,s.yg)(r.c,{tps:{name:"react-component",answers:{css:!0}},lang:"typescript",templateMeta:"{2}",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"import React from 'react';\n{{{? tps.answers.css }}}\nimport \"styles.css\";\n{{{?}}}\n")))),(0,s.yg)("hr",null),(0,s.yg)("h3",{id:"utils"},"Utils"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"{{= tps.utils }}\n")),(0,s.yg)("p",null,(0,s.yg)("inlineCode",{parentName:"p"},"tps.utils")," is a collection of helper functions to make creating templates\neasier. We've integrated powerful tools from\n",(0,s.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/change-case"},"change-case")," and\n",(0,s.yg)("a",{parentName:"p",href:"https://www.npmjs.com/package/inflection"},"inflection")," to streamline your\nworkflow."),(0,s.yg)("p",null,"here are a list of some:"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#camelCase"},"camelCase")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#capitalCase"},"capitalCase")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#constantCase"},"constantCase")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#dotCase"},"dotCase")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#headerCase"},"headerCase")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#paramCase"},"paramCase")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#pascalCase"},"pascalCase")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#snakeCase"},"snakeCase")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#pluralize"},"pluralize")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#singularize"},"singularize")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#camelize"},"camelize")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#underscore"},"underscore")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#humanize"},"humanize")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("a",{parentName:"li",href:"../../api/template-context#capitalize"},"capitalize"))),(0,s.yg)("p",null,"To explore all the available functions, check out the\n",(0,s.yg)("a",{parentName:"p",href:"../../api/template-context#utils"},"tps context utils API"),"."),(0,s.yg)(l.R,{mdxType:"Example"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-bash",metastring:'title="cli"',title:'"cli"'},"tps react-component nav\n")),(0,s.yg)(r.c,{tps:{name:"nav",packages:["default"]},lang:"tsx",mdxType:"Dot"},(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-text"},"import React from react;\n\nconst {{= tps.utils.pascalCase(tps.name)}} = (props) => {\n    return (\n        <div></div>\n    )\n}\n")))))}f.isMDXComponent=!0},41919:(e,n,t)=>{var a;!function(){"use strict";var s,l={name:"doT",version:"1.1.1",templateSettings:{evaluate:/\{\{([\s\S]+?(\}?)+)\}\}/g,interpolate:/\{\{=([\s\S]+?)\}\}/g,encode:/\{\{!([\s\S]+?)\}\}/g,use:/\{\{#([\s\S]+?)\}\}/g,useParams:/(^|[^\w$])def(?:\.|\[[\'\"])([\w$\.]+)(?:[\'\"]\])?\s*\:\s*([\w$\.]+|\"[^\"]+\"|\'[^\']+\'|\{[^\}]+\})/g,define:/\{\{##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\}\}/g,defineParams:/^\s*([\w$]+):([\s\S]+)/,conditional:/\{\{\?(\?)?\s*([\s\S]*?)\s*\}\}/g,iterate:/\{\{~\s*(?:\}\}|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\}\})/g,varname:"it",strip:!0,append:!0,selfcontained:!1,doNotSkipEncoded:!1},template:void 0,compile:void 0,log:!0};l.encodeHTMLSource=function(e){var n={"&":"&#38;","<":"&#60;",">":"&#62;",'"':"&#34;","'":"&#39;","/":"&#47;"},t=e?/[&<>"'\/]/g:/&(?!#?\w+;)|<|>|"|'|\//g;return function(e){return e?e.toString().replace(t,(function(e){return n[e]||e})):""}},s=function(){return this||(0,eval)("this")}(),e.exports?e.exports=l:void 0===(a=function(){return l}.call(n,t,n,e))||(e.exports=a);var r={append:{start:"'+(",end:")+'",startencode:"'+encodeHTML("},split:{start:"';out+=(",end:");out+='",startencode:"';out+=encodeHTML("}},o=/$^/;function i(e,n,t){return("string"==typeof n?n:n.toString()).replace(e.define||o,(function(n,a,s,l){return 0===a.indexOf("def.")&&(a=a.substring(4)),a in t||(":"===s?(e.defineParams&&l.replace(e.defineParams,(function(e,n,s){t[a]={arg:n,text:s}})),a in t||(t[a]=l)):new Function("def","def['"+a+"']="+l)(t)),""})).replace(e.use||o,(function(n,a){e.useParams&&(a=a.replace(e.useParams,(function(e,n,a,s){if(t[a]&&t[a].arg&&s){var l=(a+":"+s).replace(/'|\\/g,"_");return t.__exp=t.__exp||{},t.__exp[l]=t[a].text.replace(new RegExp("(^|[^\\w$])"+t[a].arg+"([^\\w$])","g"),"$1"+s+"$2"),n+"def.__exp['"+l+"']"}})));var s=new Function("def","return "+a)(t);return s?i(e,s,t):s}))}function p(e){return e.replace(/\\('|\\)/g,"$1").replace(/[\r\t\n]/g," ")}l.template=function(e,n,t){var a,c,m=(n=n||l.templateSettings).append?r.append:r.split,u=0,d=n.use||n.define?i(n,e,t||{}):e;d=("var out='"+(n.strip?d.replace(/(^|\r|\n)\t* +| +\t*(\r|\n|$)/g," ").replace(/\r|\n|\t|\/\*[\s\S]*?\*\//g,""):d).replace(/'|\\/g,"\\$&").replace(n.interpolate||o,(function(e,n){return m.start+p(n)+m.end})).replace(n.encode||o,(function(e,n){return a=!0,m.startencode+p(n)+m.end})).replace(n.conditional||o,(function(e,n,t){return n?t?"';}else if("+p(t)+"){out+='":"';}else{out+='":t?"';if("+p(t)+"){out+='":"';}out+='"})).replace(n.iterate||o,(function(e,n,t,a){return n?(u+=1,c=a||"i"+u,n=p(n),"';var arr"+u+"="+n+";if(arr"+u+"){var "+t+","+c+"=-1,l"+u+"=arr"+u+".length-1;while("+c+"<l"+u+"){"+t+"=arr"+u+"["+c+"+=1];out+='"):"';} } out+='"})).replace(n.evaluate||o,(function(e,n){return"';"+p(n)+"out+='"}))+"';return out;").replace(/\n/g,"\\n").replace(/\t/g,"\\t").replace(/\r/g,"\\r").replace(/(\s|;|\}|^|\{)out\+='';/g,"$1").replace(/\+''/g,""),a&&(n.selfcontained||!s||s._encodeHTML||(s._encodeHTML=l.encodeHTMLSource(n.doNotSkipEncoded)),d="var encodeHTML = typeof _encodeHTML !== 'undefined' ? _encodeHTML : ("+l.encodeHTMLSource.toString()+"("+(n.doNotSkipEncoded||"")+"));"+d);try{return new Function(n.varname,d)}catch(g){throw"undefined"!=typeof console&&console.log("Could not create a template function: "+d),g}},l.compile=function(e,n){return l.template(e,null,n)}}()}}]);