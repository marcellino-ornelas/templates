name: Tests

on:
  pull_request:
  workflow_dispatch:

jobs:
  #   test-debug:
  #     runs-on: ubuntu-latest
  #     strategy:
  #       matrix:
  #         node-version: [12.x]
  #     steps:
  #     - uses: actions/checkout@v1
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - name: Npm Install
  #       run: npm ci
  #       env:
  #         CI: true
  #     - name: Build Assests
  #       run: npm run code:build --if-present
  #     - name: Test Code
  #       run:  npm run test:core -- new/packages
  #       env:
  #         DEBUG: tps
  test-core:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Npm Install
        run: npm install
      # - name: Build Assests
      #   run: npm run code:build
      - name: Test Code
        run: |
          npm run code:build
          npm run test:core

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: 18
      - name: Npm Install
        run: npm install
      - name: Npm Install docs
        run: npm install --prefix docs
      - name: Test Code
        run: |
          npm run lint

  typecheck:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Npm Install
        run: npm install
      - name: Test Code
        run: npm run typecheck

  docs-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docs
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: 18
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Npm Install
        run: npm install

      - name: Test Build
        run: npm run build
  # test-init:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       node-version: [12.x, 10.x]
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v1
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #   - name: Npm Install
  #     run: npm install
  #     env:
  #       CI: true
  #   - name: Build Assests
  #     run: npm run code:build --if-present
  #   - name: Test Code
  #     run: sudo npm run test:init
